%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.3
-module(search3_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type index() ::
      #{prefix                  => iodata()         % = 1
       }.

-type info_response() ::
      #{size                    => non_neg_integer(), % = 1, 32 bits
        doc_count               => non_neg_integer(), % = 2, 32 bits
        doc_del_count           => non_neg_integer(), % = 3, 32 bits
        committed_seq           => iodata(),        % = 5
        purge_seq               => iodata()         % = 6
       }.

-type sort() ::
      #{fields                  => [iodata()]       % = 1
       }.

-type search_request() ::
      #{index                   => index(),         % = 1
        query                   => iodata(),        % = 2
        limit                   => non_neg_integer(), % = 3, 32 bits
        stale                   => boolean() | 0 | 1, % = 4
        sort                    => sort(),          % = 5
        partition               => iodata(),        % = 6
        counts                  => [iodata()],      % = 7
        ranges                  => iodata(),        % = 8
        drilldown               => iodata(),        % = 9
        include_fields          => [iodata()]       % = 10
       }.

-type search_response() ::
      #{matches                 => non_neg_integer(), % = 1, 32 bits
        hits                    => [hit()]          % = 2
       }.

-type group_search_request() ::
      #{index                   => index(),         % = 1
        query                   => iodata(),        % = 2
        limit                   => non_neg_integer(), % = 3, 32 bits
        stale                   => boolean() | 0 | 1, % = 4
        group_by                => iodata(),        % = 5
        group_offset            => non_neg_integer(), % = 6, 32 bits
        group_limit             => non_neg_integer(), % = 7, 32 bits
        group_sort              => sort()           % = 8
       }.

-type group_search_response() ::
      #{matches                 => non_neg_integer(), % = 1, 32 bits
        group_matches           => non_neg_integer(), % = 2, 32 bits
        groups                  => [group()]        % = 3
       }.

-type group() ::
      #{by                      => iodata(),        % = 1
        matches                 => non_neg_integer(), % = 2, 32 bits
        hits                    => [group_hit()]    % = 3
       }.

-type group_hit() ::
      #{id                      => iodata(),        % = 1
        order                   => [field_value()], % = 2
        fields                  => [hit_field()]    % = 3
       }.

-type hit() ::
      #{id                      => iodata(),        % = 1
        order                   => [field_value()], % = 2
        fields                  => [hit_field()]    % = 3
       }.

-type document() ::
      #{index                   => iodata(),        % = 1
        fields                  => [document_field()] % = 2
       }.

-type document_field() ::
      #{name                    => iodata(),        % = 1
        value                   => field_value(),   % = 2
        analyzed                => boolean() | 0 | 1, % = 3
        stored                  => boolean() | 0 | 1, % = 4
        facet                   => boolean() | 0 | 1 % = 5
       }.

-type hit_field() ::
      #{name                    => iodata(),        % = 1
        value                   => field_value()    % = 2
       }.

-type field_value() ::
      #{value_oneof             => {string_value, iodata()} | {bool_value, boolean() | 0 | 1} | {double_value, float() | integer() | infinity | '-infinity' | nan} % oneof
       }.

-type search_term() ::
      #{field                   => iodata(),        % = 1
        value                   => iodata()         % = 2
       }.

-type document_update() ::
      #{index                   => index(),         % = 1
        id                      => iodata(),        % = 2
        fields                  => [document_field()] % = 3
       }.

-type update_seq() ::
      #{seq                     => iodata()         % = 1
       }.

-type set_update_seq() ::
      #{index                   => index(),         % = 1
        seq                     => iodata()         % = 2
       }.

-type service_response() ::
      #{code                    => non_neg_integer(), % = 1, 32 bits
        reason                  => iodata()         % = 2
       }.

-export_type(['index'/0, 'info_response'/0, 'sort'/0, 'search_request'/0, 'search_response'/0, 'group_search_request'/0, 'group_search_response'/0, 'group'/0, 'group_hit'/0, 'hit'/0, 'document'/0, 'document_field'/0, 'hit_field'/0, 'field_value'/0, 'search_term'/0, 'document_update'/0, 'update_seq'/0, 'set_update_seq'/0, 'service_response'/0]).

-spec encode_msg(index() | info_response() | sort() | search_request() | search_response() | group_search_request() | group_search_response() | group() | group_hit() | hit() | document() | document_field() | hit_field() | field_value() | search_term() | document_update() | update_seq() | set_update_seq() | service_response(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(index() | info_response() | sort() | search_request() | search_response() | group_search_request() | group_search_response() | group() | group_hit() | hit() | document() | document_field() | hit_field() | field_value() | search_term() | document_update() | update_seq() | set_update_seq() | service_response(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      index ->
	  encode_msg_index(id(Msg, TrUserData), TrUserData);
      info_response ->
	  encode_msg_info_response(id(Msg, TrUserData),
				   TrUserData);
      sort ->
	  encode_msg_sort(id(Msg, TrUserData), TrUserData);
      search_request ->
	  encode_msg_search_request(id(Msg, TrUserData),
				    TrUserData);
      search_response ->
	  encode_msg_search_response(id(Msg, TrUserData),
				     TrUserData);
      group_search_request ->
	  encode_msg_group_search_request(id(Msg, TrUserData),
					  TrUserData);
      group_search_response ->
	  encode_msg_group_search_response(id(Msg, TrUserData),
					   TrUserData);
      group ->
	  encode_msg_group(id(Msg, TrUserData), TrUserData);
      group_hit ->
	  encode_msg_group_hit(id(Msg, TrUserData), TrUserData);
      hit -> encode_msg_hit(id(Msg, TrUserData), TrUserData);
      document ->
	  encode_msg_document(id(Msg, TrUserData), TrUserData);
      document_field ->
	  encode_msg_document_field(id(Msg, TrUserData),
				    TrUserData);
      hit_field ->
	  encode_msg_hit_field(id(Msg, TrUserData), TrUserData);
      field_value ->
	  encode_msg_field_value(id(Msg, TrUserData), TrUserData);
      search_term ->
	  encode_msg_search_term(id(Msg, TrUserData), TrUserData);
      document_update ->
	  encode_msg_document_update(id(Msg, TrUserData),
				     TrUserData);
      update_seq ->
	  encode_msg_update_seq(id(Msg, TrUserData), TrUserData);
      set_update_seq ->
	  encode_msg_set_update_seq(id(Msg, TrUserData),
				    TrUserData);
      service_response ->
	  encode_msg_service_response(id(Msg, TrUserData),
				      TrUserData)
    end.


encode_msg_index(Msg, TrUserData) ->
    encode_msg_index(Msg, <<>>, TrUserData).


encode_msg_index(#{} = M, Bin, TrUserData) ->
    case M of
      #{prefix := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case iolist_size(TrF1) of
	      0 -> Bin;
	      _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_info_response(Msg, TrUserData) ->
    encode_msg_info_response(Msg, <<>>, TrUserData).


encode_msg_info_response(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{size := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{doc_count := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{doc_del_count := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{committed_seq := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 case is_empty_string(TrF4) of
		   true -> B3;
		   false ->
		       e_type_string(TrF4, <<B3/binary, 42>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    case M of
      #{purge_seq := F5} ->
	  begin
	    TrF5 = id(F5, TrUserData),
	    case is_empty_string(TrF5) of
	      true -> B4;
	      false ->
		  e_type_string(TrF5, <<B4/binary, 50>>, TrUserData)
	    end
	  end;
      _ -> B4
    end.

encode_msg_sort(Msg, TrUserData) ->
    encode_msg_sort(Msg, <<>>, TrUserData).


encode_msg_sort(#{} = M, Bin, TrUserData) ->
    case M of
      #{fields := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true -> e_field_sort_fields(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_search_request(Msg, TrUserData) ->
    encode_msg_search_request(Msg, <<>>, TrUserData).


encode_msg_search_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{index := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_search_request_index(TrF1, <<Bin/binary, 10>>,
						      TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{query := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{limit := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{stale := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= false -> B3;
		    true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{sort := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 if TrF5 =:= undefined -> B4;
		    true ->
			e_mfield_search_request_sort(TrF5, <<B4/binary, 42>>,
						     TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{partition := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 case is_empty_string(TrF6) of
		   true -> B5;
		   false ->
		       e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{counts := F7} ->
	       TrF7 = id(F7, TrUserData),
	       if TrF7 == [] -> B6;
		  true ->
		      e_field_search_request_counts(TrF7, B6, TrUserData)
	       end;
	   _ -> B6
	 end,
    B8 = case M of
	   #{ranges := F8} ->
	       begin
		 TrF8 = id(F8, TrUserData),
		 case is_empty_string(TrF8) of
		   true -> B7;
		   false ->
		       e_type_string(TrF8, <<B7/binary, 66>>, TrUserData)
		 end
	       end;
	   _ -> B7
	 end,
    B9 = case M of
	   #{drilldown := F9} ->
	       begin
		 TrF9 = id(F9, TrUserData),
		 case is_empty_string(TrF9) of
		   true -> B8;
		   false ->
		       e_type_string(TrF9, <<B8/binary, 74>>, TrUserData)
		 end
	       end;
	   _ -> B8
	 end,
    case M of
      #{include_fields := F10} ->
	  TrF10 = id(F10, TrUserData),
	  if TrF10 == [] -> B9;
	     true ->
		 e_field_search_request_include_fields(TrF10, B9,
						       TrUserData)
	  end;
      _ -> B9
    end.

encode_msg_search_response(Msg, TrUserData) ->
    encode_msg_search_response(Msg, <<>>, TrUserData).


encode_msg_search_response(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{matches := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{hits := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true ->
		 e_field_search_response_hits(TrF2, B1, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_group_search_request(Msg, TrUserData) ->
    encode_msg_group_search_request(Msg, <<>>, TrUserData).


encode_msg_group_search_request(#{} = M, Bin,
				TrUserData) ->
    B1 = case M of
	   #{index := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_group_search_request_index(TrF1,
							    <<Bin/binary, 10>>,
							    TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{query := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{limit := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{stale := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= false -> B3;
		    true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{group_by := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 case is_empty_string(TrF5) of
		   true -> B4;
		   false ->
		       e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{group_offset := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 if TrF6 =:= 0 -> B5;
		    true -> e_varint(TrF6, <<B5/binary, 48>>, TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{group_limit := F7} ->
	       begin
		 TrF7 = id(F7, TrUserData),
		 if TrF7 =:= 0 -> B6;
		    true -> e_varint(TrF7, <<B6/binary, 56>>, TrUserData)
		 end
	       end;
	   _ -> B6
	 end,
    case M of
      #{group_sort := F8} ->
	  begin
	    TrF8 = id(F8, TrUserData),
	    if TrF8 =:= undefined -> B7;
	       true ->
		   e_mfield_group_search_request_group_sort(TrF8,
							    <<B7/binary, 66>>,
							    TrUserData)
	    end
	  end;
      _ -> B7
    end.

encode_msg_group_search_response(Msg, TrUserData) ->
    encode_msg_group_search_response(Msg, <<>>, TrUserData).


encode_msg_group_search_response(#{} = M, Bin,
				 TrUserData) ->
    B1 = case M of
	   #{matches := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{group_matches := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{groups := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true ->
		 e_field_group_search_response_groups(TrF3, B2,
						      TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_group(Msg, TrUserData) ->
    encode_msg_group(Msg, <<>>, TrUserData).


encode_msg_group(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{by := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{matches := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{hits := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true -> e_field_group_hits(TrF3, B2, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_group_hit(Msg, TrUserData) ->
    encode_msg_group_hit(Msg, <<>>, TrUserData).


encode_msg_group_hit(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{order := F2} ->
	       TrF2 = id(F2, TrUserData),
	       if TrF2 == [] -> B1;
		  true -> e_field_group_hit_order(TrF2, B1, TrUserData)
	       end;
	   _ -> B1
	 end,
    case M of
      #{fields := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true -> e_field_group_hit_fields(TrF3, B2, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_hit(Msg, TrUserData) ->
    encode_msg_hit(Msg, <<>>, TrUserData).


encode_msg_hit(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{order := F2} ->
	       TrF2 = id(F2, TrUserData),
	       if TrF2 == [] -> B1;
		  true -> e_field_hit_order(TrF2, B1, TrUserData)
	       end;
	   _ -> B1
	 end,
    case M of
      #{fields := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true -> e_field_hit_fields(TrF3, B2, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_document(Msg, TrUserData) ->
    encode_msg_document(Msg, <<>>, TrUserData).


encode_msg_document(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{index := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{fields := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true -> e_field_document_fields(TrF2, B1, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_document_field(Msg, TrUserData) ->
    encode_msg_document_field(Msg, <<>>, TrUserData).


encode_msg_document_field(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{value := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= undefined -> B1;
		    true ->
			e_mfield_document_field_value(TrF2, <<B1/binary, 18>>,
						      TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{analyzed := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= false -> B2;
		    true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{stored := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= false -> B3;
		    true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    case M of
      #{facet := F5} ->
	  begin
	    TrF5 = id(F5, TrUserData),
	    if TrF5 =:= false -> B4;
	       true -> e_type_bool(TrF5, <<B4/binary, 40>>, TrUserData)
	    end
	  end;
      _ -> B4
    end.

encode_msg_hit_field(Msg, TrUserData) ->
    encode_msg_hit_field(Msg, <<>>, TrUserData).


encode_msg_hit_field(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{value := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_hit_field_value(TrF2, <<B1/binary, 18>>,
					    TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_field_value(Msg, TrUserData) ->
    encode_msg_field_value(Msg, <<>>, TrUserData).


encode_msg_field_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value_oneof := F1} ->
	  case id(F1, TrUserData) of
	    {string_value, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_string(TrTF1, <<Bin/binary, 10>>, TrUserData)
		end;
	    {bool_value, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_bool(TrTF1, <<Bin/binary, 16>>, TrUserData)
		end;
	    {double_value, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_double(TrTF1, <<Bin/binary, 25>>, TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_search_term(Msg, TrUserData) ->
    encode_msg_search_term(Msg, <<>>, TrUserData).


encode_msg_search_term(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{field := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{value := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_document_update(Msg, TrUserData) ->
    encode_msg_document_update(Msg, <<>>, TrUserData).


encode_msg_document_update(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{index := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_document_update_index(TrF1, <<Bin/binary, 10>>,
						       TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{fields := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true ->
		 e_field_document_update_fields(TrF3, B2, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_update_seq(Msg, TrUserData) ->
    encode_msg_update_seq(Msg, <<>>, TrUserData).


encode_msg_update_seq(#{} = M, Bin, TrUserData) ->
    case M of
      #{seq := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false ->
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_set_update_seq(Msg, TrUserData) ->
    encode_msg_set_update_seq(Msg, <<>>, TrUserData).


encode_msg_set_update_seq(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{index := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_set_update_seq_index(TrF1, <<Bin/binary, 10>>,
						      TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{seq := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_service_response(Msg, TrUserData) ->
    encode_msg_service_response(Msg, <<>>, TrUserData).


encode_msg_service_response(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{code := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{reason := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

e_field_sort_fields([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_sort_fields(Rest, Bin3, TrUserData);
e_field_sort_fields([], Bin, _TrUserData) -> Bin.

e_mfield_search_request_index(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_index(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_search_request_sort(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_sort(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_search_request_counts([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_search_request_counts(Rest, Bin3, TrUserData);
e_field_search_request_counts([], Bin, _TrUserData) ->
    Bin.

e_field_search_request_include_fields([Elem | Rest],
				      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_search_request_include_fields(Rest, Bin3,
					  TrUserData);
e_field_search_request_include_fields([], Bin,
				      _TrUserData) ->
    Bin.

e_mfield_search_response_hits(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_hit(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_search_response_hits([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_search_response_hits(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_search_response_hits(Rest, Bin3, TrUserData);
e_field_search_response_hits([], Bin, _TrUserData) ->
    Bin.

e_mfield_group_search_request_index(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_index(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_group_search_request_group_sort(Msg, Bin,
					 TrUserData) ->
    SubBin = encode_msg_sort(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_group_search_response_groups(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_group(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_group_search_response_groups([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_group_search_response_groups(id(Elem,
						    TrUserData),
						 Bin2, TrUserData),
    e_field_group_search_response_groups(Rest, Bin3,
					 TrUserData);
e_field_group_search_response_groups([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_group_hits(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_group_hit(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_group_hits([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_group_hits(id(Elem, TrUserData), Bin2,
			       TrUserData),
    e_field_group_hits(Rest, Bin3, TrUserData);
e_field_group_hits([], Bin, _TrUserData) -> Bin.

e_mfield_group_hit_order(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_field_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_group_hit_order([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_group_hit_order(id(Elem, TrUserData),
				    Bin2, TrUserData),
    e_field_group_hit_order(Rest, Bin3, TrUserData);
e_field_group_hit_order([], Bin, _TrUserData) -> Bin.

e_mfield_group_hit_fields(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_hit_field(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_group_hit_fields([Elem | Rest], Bin,
			 TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_group_hit_fields(id(Elem, TrUserData),
				     Bin2, TrUserData),
    e_field_group_hit_fields(Rest, Bin3, TrUserData);
e_field_group_hit_fields([], Bin, _TrUserData) -> Bin.

e_mfield_hit_order(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_field_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_hit_order([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_hit_order(id(Elem, TrUserData), Bin2,
			      TrUserData),
    e_field_hit_order(Rest, Bin3, TrUserData);
e_field_hit_order([], Bin, _TrUserData) -> Bin.

e_mfield_hit_fields(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_hit_field(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_hit_fields([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_hit_fields(id(Elem, TrUserData), Bin2,
			       TrUserData),
    e_field_hit_fields(Rest, Bin3, TrUserData);
e_field_hit_fields([], Bin, _TrUserData) -> Bin.

e_mfield_document_fields(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_document_field(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_document_fields([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_document_fields(id(Elem, TrUserData),
				    Bin2, TrUserData),
    e_field_document_fields(Rest, Bin3, TrUserData);
e_field_document_fields([], Bin, _TrUserData) -> Bin.

e_mfield_document_field_value(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_field_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_hit_field_value(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_field_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_document_update_index(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_index(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_document_update_fields(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_document_field(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_document_update_fields([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_document_update_fields(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_document_update_fields(Rest, Bin3, TrUserData);
e_field_document_update_fields([], Bin, _TrUserData) ->
    Bin.

e_mfield_set_update_seq_index(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_index(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(index, Bin, TrUserData) ->
    id(decode_msg_index(Bin, TrUserData), TrUserData);
decode_msg_2_doit(info_response, Bin, TrUserData) ->
    id(decode_msg_info_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(sort, Bin, TrUserData) ->
    id(decode_msg_sort(Bin, TrUserData), TrUserData);
decode_msg_2_doit(search_request, Bin, TrUserData) ->
    id(decode_msg_search_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(search_response, Bin, TrUserData) ->
    id(decode_msg_search_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(group_search_request, Bin,
		  TrUserData) ->
    id(decode_msg_group_search_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(group_search_response, Bin,
		  TrUserData) ->
    id(decode_msg_group_search_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(group, Bin, TrUserData) ->
    id(decode_msg_group(Bin, TrUserData), TrUserData);
decode_msg_2_doit(group_hit, Bin, TrUserData) ->
    id(decode_msg_group_hit(Bin, TrUserData), TrUserData);
decode_msg_2_doit(hit, Bin, TrUserData) ->
    id(decode_msg_hit(Bin, TrUserData), TrUserData);
decode_msg_2_doit(document, Bin, TrUserData) ->
    id(decode_msg_document(Bin, TrUserData), TrUserData);
decode_msg_2_doit(document_field, Bin, TrUserData) ->
    id(decode_msg_document_field(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(hit_field, Bin, TrUserData) ->
    id(decode_msg_hit_field(Bin, TrUserData), TrUserData);
decode_msg_2_doit(field_value, Bin, TrUserData) ->
    id(decode_msg_field_value(Bin, TrUserData), TrUserData);
decode_msg_2_doit(search_term, Bin, TrUserData) ->
    id(decode_msg_search_term(Bin, TrUserData), TrUserData);
decode_msg_2_doit(document_update, Bin, TrUserData) ->
    id(decode_msg_document_update(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(update_seq, Bin, TrUserData) ->
    id(decode_msg_update_seq(Bin, TrUserData), TrUserData);
decode_msg_2_doit(set_update_seq, Bin, TrUserData) ->
    id(decode_msg_set_update_seq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(service_response, Bin, TrUserData) ->
    id(decode_msg_service_response(Bin, TrUserData),
       TrUserData).



decode_msg_index(Bin, TrUserData) ->
    dfp_read_field_def_index(Bin, 0, 0,
			     id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_index(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_index_prefix(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_index(<<>>, 0, 0, F@_1, _) ->
    #{prefix => F@_1};
dfp_read_field_def_index(Other, Z1, Z2, F@_1,
			 TrUserData) ->
    dg_read_field_def_index(Other, Z1, Z2, F@_1,
			    TrUserData).

dg_read_field_def_index(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_index(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
dg_read_field_def_index(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_index_prefix(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_index(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_index(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_index(Rest, 0, 0, F@_1,
					    TrUserData);
	    3 ->
		skip_group_index(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_index(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_index(<<>>, 0, 0, F@_1, _) ->
    #{prefix => F@_1}.

d_field_index_prefix(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, TrUserData)
    when N < 57 ->
    d_field_index_prefix(Rest, N + 7, X bsl N + Acc, F@_1,
			 TrUserData);
d_field_index_prefix(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_index(RestF, 0, 0, NewFValue,
			     TrUserData).

skip_varint_index(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, TrUserData) ->
    skip_varint_index(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_index(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, TrUserData) ->
    dfp_read_field_def_index(Rest, Z1, Z2, F@_1,
			     TrUserData).

skip_length_delimited_index(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_index(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
skip_length_delimited_index(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_index(Rest2, 0, 0, F@_1, TrUserData).

skip_group_index(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_index(Rest, 0, Z2, F@_1, TrUserData).

skip_32_index(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	      TrUserData) ->
    dfp_read_field_def_index(Rest, Z1, Z2, F@_1,
			     TrUserData).

skip_64_index(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	      TrUserData) ->
    dfp_read_field_def_index(Rest, Z1, Z2, F@_1,
			     TrUserData).

decode_msg_info_response(Bin, TrUserData) ->
    dfp_read_field_def_info_response(Bin, 0, 0,
				     id(0, TrUserData), id(0, TrUserData),
				     id(0, TrUserData), id(<<>>, TrUserData),
				     id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_info_response(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_info_response_size(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_info_response(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_info_response_doc_count(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_info_response(<<24, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_info_response_doc_del_count(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_info_response(<<42, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_info_response_committed_seq(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_info_response(<<50, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_info_response_purge_seq(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_info_response(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, _) ->
    #{size => F@_1, doc_count => F@_2,
      doc_del_count => F@_3, committed_seq => F@_4,
      purge_seq => F@_5};
dfp_read_field_def_info_response(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_info_response(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_info_response(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_info_response(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
dg_read_field_def_info_response(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_info_response_size(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      16 ->
	  d_field_info_response_doc_count(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_info_response_doc_del_count(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
      42 ->
	  d_field_info_response_committed_seq(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
      50 ->
	  d_field_info_response_purge_seq(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_info_response(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_info_response(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_info_response(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData);
	    3 ->
		skip_group_info_response(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_info_response(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_info_response(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, _) ->
    #{size => F@_1, doc_count => F@_2,
      doc_del_count => F@_3, committed_seq => F@_4,
      purge_seq => F@_5}.

d_field_info_response_size(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_info_response_size(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_info_response_size(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_info_response(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_info_response_doc_count(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_info_response_doc_count(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_info_response_doc_count(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_info_response(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_info_response_doc_del_count(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    d_field_info_response_doc_del_count(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
d_field_info_response_doc_del_count(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_info_response(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_info_response_committed_seq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    d_field_info_response_committed_seq(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
d_field_info_response_committed_seq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_info_response(RestF, 0, 0, F@_1,
				     F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_info_response_purge_seq(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_info_response_purge_seq(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_info_response_purge_seq(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_info_response(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_info_response(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_info_response(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
skip_varint_info_response(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_info_response(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_info_response(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    skip_length_delimited_info_response(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
skip_length_delimited_info_response(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_info_response(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_info_response(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_info_response(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_info_response(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_info_response(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_info_response(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_info_response(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_sort(Bin, TrUserData) ->
    dfp_read_field_def_sort(Bin, 0, 0, id([], TrUserData),
			    TrUserData).

dfp_read_field_def_sort(<<10, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    d_field_sort_fields(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_sort(<<>>, 0, 0, R1, TrUserData) ->
    #{fields => lists_reverse(R1, TrUserData)};
dfp_read_field_def_sort(Other, Z1, Z2, F@_1,
			TrUserData) ->
    dg_read_field_def_sort(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_sort(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sort(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
dg_read_field_def_sort(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_sort_fields(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_sort(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_sort(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_sort(Rest, 0, 0, F@_1,
					   TrUserData);
	    3 ->
		skip_group_sort(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_sort(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_sort(<<>>, 0, 0, R1, TrUserData) ->
    #{fields => lists_reverse(R1, TrUserData)}.

d_field_sort_fields(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, TrUserData)
    when N < 57 ->
    d_field_sort_fields(Rest, N + 7, X bsl N + Acc, F@_1,
			TrUserData);
d_field_sort_fields(<<0:1, X:7, Rest/binary>>, N, Acc,
		    Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_sort(RestF, 0, 0,
			    cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_sort(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, TrUserData) ->
    skip_varint_sort(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_sort(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, TrUserData) ->
    dfp_read_field_def_sort(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_sort(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_sort(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
skip_length_delimited_sort(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sort(Rest2, 0, 0, F@_1, TrUserData).

skip_group_sort(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sort(Rest, 0, Z2, F@_1, TrUserData).

skip_32_sort(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	     TrUserData) ->
    dfp_read_field_def_sort(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_sort(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	     TrUserData) ->
    dfp_read_field_def_sort(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_search_request(Bin, TrUserData) ->
    dfp_read_field_def_search_request(Bin, 0, 0,
				      id('$undef', TrUserData),
				      id(<<>>, TrUserData), id(0, TrUserData),
				      id(false, TrUserData),
				      id('$undef', TrUserData),
				      id(<<>>, TrUserData), id([], TrUserData),
				      id(<<>>, TrUserData),
				      id(<<>>, TrUserData), id([], TrUserData),
				      TrUserData).

dfp_read_field_def_search_request(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_search_request_index(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, TrUserData);
dfp_read_field_def_search_request(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_search_request_query(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, TrUserData);
dfp_read_field_def_search_request(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_search_request_limit(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, TrUserData);
dfp_read_field_def_search_request(<<32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_search_request_stale(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, TrUserData);
dfp_read_field_def_search_request(<<42, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_search_request_sort(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData);
dfp_read_field_def_search_request(<<50, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_search_request_partition(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, TrUserData);
dfp_read_field_def_search_request(<<58, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_search_request_counts(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, TrUserData);
dfp_read_field_def_search_request(<<66, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_search_request_ranges(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, TrUserData);
dfp_read_field_def_search_request(<<74, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_search_request_drilldown(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, TrUserData);
dfp_read_field_def_search_request(<<82, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_search_request_include_fields(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_search_request(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, R1, F@_8, F@_9,
				  R2, TrUserData) ->
    S1 = #{query => F@_2, limit => F@_3, stale => F@_4,
	   partition => F@_6,
	   counts => lists_reverse(R1, TrUserData), ranges => F@_8,
	   drilldown => F@_9,
	   include_fields => lists_reverse(R2, TrUserData)},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{index => F@_1}
	 end,
    if F@_5 == '$undef' -> S2;
       true -> S2#{sort => F@_5}
    end;
dfp_read_field_def_search_request(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				  F@_9, F@_10, TrUserData) ->
    dg_read_field_def_search_request(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, TrUserData).

dg_read_field_def_search_request(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_search_request(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     TrUserData);
dg_read_field_def_search_request(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_search_request_index(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, TrUserData);
      18 ->
	  d_field_search_request_query(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, TrUserData);
      24 ->
	  d_field_search_request_limit(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, TrUserData);
      32 ->
	  d_field_search_request_stale(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, TrUserData);
      42 ->
	  d_field_search_request_sort(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, TrUserData);
      50 ->
	  d_field_search_request_partition(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					   F@_9, F@_10, TrUserData);
      58 ->
	  d_field_search_request_counts(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, TrUserData);
      66 ->
	  d_field_search_request_ranges(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, TrUserData);
      74 ->
	  d_field_search_request_drilldown(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					   F@_9, F@_10, TrUserData);
      82 ->
	  d_field_search_request_include_fields(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, F@_9, F@_10,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_search_request(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					   F@_10, TrUserData);
	    1 ->
		skip_64_search_request(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, TrUserData);
	    2 ->
		skip_length_delimited_search_request(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, TrUserData);
	    3 ->
		skip_group_search_request(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  F@_8, F@_9, F@_10, TrUserData);
	    5 ->
		skip_32_search_request(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, TrUserData)
	  end
    end;
dg_read_field_def_search_request(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, R1, F@_8, F@_9, R2,
				 TrUserData) ->
    S1 = #{query => F@_2, limit => F@_3, stale => F@_4,
	   partition => F@_6,
	   counts => lists_reverse(R1, TrUserData), ranges => F@_8,
	   drilldown => F@_9,
	   include_fields => lists_reverse(R2, TrUserData)},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{index => F@_1}
	 end,
    if F@_5 == '$undef' -> S2;
       true -> S2#{sort => F@_5}
    end.

d_field_search_request_index(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_search_request_index(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, TrUserData);
d_field_search_request_index(<<0:1, X:7, Rest/binary>>,
			     N, Acc, Prev, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_index(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_search_request(RestF, 0, 0,
				      if Prev == '$undef' -> NewFValue;
					 true ->
					     merge_msg_index(Prev, NewFValue,
							     TrUserData)
				      end,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, TrUserData).

d_field_search_request_query(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_search_request_query(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, TrUserData);
d_field_search_request_query(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_search_request(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				      F@_8, F@_9, F@_10, TrUserData).

d_field_search_request_limit(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_search_request_limit(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, TrUserData);
d_field_search_request_limit(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_search_request(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7,
				      F@_8, F@_9, F@_10, TrUserData).

d_field_search_request_stale(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_search_request_stale(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, TrUserData);
d_field_search_request_stale(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_search_request(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7,
				      F@_8, F@_9, F@_10, TrUserData).

d_field_search_request_sort(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_search_request_sort(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, TrUserData);
d_field_search_request_sort(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7,
			    F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_sort(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_search_request(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4,
				      if Prev == '$undef' -> NewFValue;
					 true ->
					     merge_msg_sort(Prev, NewFValue,
							    TrUserData)
				      end,
				      F@_6, F@_7, F@_8, F@_9, F@_10,
				      TrUserData).

d_field_search_request_partition(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_search_request_partition(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     TrUserData);
d_field_search_request_partition(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
				 F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_search_request(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7,
				      F@_8, F@_9, F@_10, TrUserData).

d_field_search_request_counts(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_search_request_counts(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_search_request_counts(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev,
			      F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_search_request(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6,
				      cons(NewFValue, Prev, TrUserData), F@_8,
				      F@_9, F@_10, TrUserData).

d_field_search_request_ranges(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_search_request_ranges(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_search_request_ranges(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      _, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_search_request(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      NewFValue, F@_9, F@_10, TrUserData).

d_field_search_request_drilldown(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_search_request_drilldown(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     TrUserData);
d_field_search_request_drilldown(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, _, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_search_request(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      NewFValue, F@_10, TrUserData).

d_field_search_request_include_fields(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_search_request_include_fields(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					  TrUserData);
d_field_search_request_include_fields(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, Prev,
				      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_search_request(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, cons(NewFValue, Prev, TrUserData),
				      TrUserData).

skip_varint_search_request(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   F@_8, F@_9, F@_10, TrUserData) ->
    skip_varint_search_request(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData);
skip_varint_search_request(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   F@_8, F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_search_request(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, TrUserData).

skip_length_delimited_search_request(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    skip_length_delimited_search_request(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					 TrUserData);
skip_length_delimited_search_request(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_search_request(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, TrUserData).

skip_group_search_request(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_search_request(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, TrUserData).

skip_32_search_request(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		       F@_10, TrUserData) ->
    dfp_read_field_def_search_request(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, TrUserData).

skip_64_search_request(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		       F@_10, TrUserData) ->
    dfp_read_field_def_search_request(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, TrUserData).

decode_msg_search_response(Bin, TrUserData) ->
    dfp_read_field_def_search_response(Bin, 0, 0,
				       id(0, TrUserData), id([], TrUserData),
				       TrUserData).

dfp_read_field_def_search_response(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_search_response_matches(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_search_response(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_search_response_hits(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_search_response(<<>>, 0, 0, F@_1, R1,
				   TrUserData) ->
    S1 = #{matches => F@_1},
    if R1 == '$undef' -> S1;
       true -> S1#{hits => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_search_response(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    dg_read_field_def_search_response(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

dg_read_field_def_search_response(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_search_response(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_search_response(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_search_response_matches(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      18 ->
	  d_field_search_response_hits(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_search_response(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		skip_64_search_response(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		skip_length_delimited_search_response(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		skip_group_search_response(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		skip_32_search_response(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
dg_read_field_def_search_response(<<>>, 0, 0, F@_1, R1,
				  TrUserData) ->
    S1 = #{matches => F@_1},
    if R1 == '$undef' -> S1;
       true -> S1#{hits => lists_reverse(R1, TrUserData)}
    end.

d_field_search_response_matches(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_search_response_matches(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_search_response_matches(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_search_response(RestF, 0, 0,
				       NewFValue, F@_2, TrUserData).

d_field_search_response_hits(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_search_response_hits(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_search_response_hits(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_hit(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_search_response(RestF, 0, 0, F@_1,
				       cons(NewFValue, Prev, TrUserData),
				       TrUserData).

skip_varint_search_response(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_search_response(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
skip_varint_search_response(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_search_response(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_length_delimited_search_response(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_search_response(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
skip_length_delimited_search_response(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_search_response(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

skip_group_search_response(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_search_response(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

skip_32_search_response(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_search_response(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_64_search_response(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_search_response(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

decode_msg_group_search_request(Bin, TrUserData) ->
    dfp_read_field_def_group_search_request(Bin, 0, 0,
					    id('$undef', TrUserData),
					    id(<<>>, TrUserData),
					    id(0, TrUserData),
					    id(false, TrUserData),
					    id(<<>>, TrUserData),
					    id(0, TrUserData),
					    id(0, TrUserData),
					    id('$undef', TrUserData),
					    TrUserData).

dfp_read_field_def_group_search_request(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData) ->
    d_field_group_search_request_index(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData);
dfp_read_field_def_group_search_request(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData) ->
    d_field_group_search_request_query(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData);
dfp_read_field_def_group_search_request(<<24,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData) ->
    d_field_group_search_request_limit(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData);
dfp_read_field_def_group_search_request(<<32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData) ->
    d_field_group_search_request_stale(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData);
dfp_read_field_def_group_search_request(<<42,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData) ->
    d_field_group_search_request_group_by(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, TrUserData);
dfp_read_field_def_group_search_request(<<48,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData) ->
    d_field_group_search_request_group_offset(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_group_search_request(<<56,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData) ->
    d_field_group_search_request_group_limit(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, TrUserData);
dfp_read_field_def_group_search_request(<<66,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData) ->
    d_field_group_search_request_group_sort(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, TrUserData);
dfp_read_field_def_group_search_request(<<>>, 0, 0,
					F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					F@_7, F@_8, _) ->
    S1 = #{query => F@_2, limit => F@_3, stale => F@_4,
	   group_by => F@_5, group_offset => F@_6,
	   group_limit => F@_7},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{index => F@_1}
	 end,
    if F@_8 == '$undef' -> S2;
       true -> S2#{group_sort => F@_8}
    end;
dfp_read_field_def_group_search_request(Other, Z1, Z2,
					F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					F@_7, F@_8, TrUserData) ->
    dg_read_field_def_group_search_request(Other, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, TrUserData).

dg_read_field_def_group_search_request(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_group_search_request(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8,
					   TrUserData);
dg_read_field_def_group_search_request(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_group_search_request_index(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, TrUserData);
      18 ->
	  d_field_group_search_request_query(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, TrUserData);
      24 ->
	  d_field_group_search_request_limit(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, TrUserData);
      32 ->
	  d_field_group_search_request_stale(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, TrUserData);
      42 ->
	  d_field_group_search_request_group_by(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, TrUserData);
      48 ->
	  d_field_group_search_request_group_offset(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7, F@_8,
						    TrUserData);
      56 ->
	  d_field_group_search_request_group_limit(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8,
						   TrUserData);
      66 ->
	  d_field_group_search_request_group_sort(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, F@_8, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_group_search_request(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, F@_6, F@_7,
						 F@_8, TrUserData);
	    1 ->
		skip_64_group_search_request(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					     TrUserData);
	    2 ->
		skip_length_delimited_group_search_request(Rest, 0, 0,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5, F@_6,
							   F@_7, F@_8,
							   TrUserData);
	    3 ->
		skip_group_group_search_request(Rest, Key bsr 3, 0,
						F@_1, F@_2, F@_3, F@_4, F@_5,
						F@_6, F@_7, F@_8, TrUserData);
	    5 ->
		skip_32_group_search_request(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					     TrUserData)
	  end
    end;
dg_read_field_def_group_search_request(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       _) ->
    S1 = #{query => F@_2, limit => F@_3, stale => F@_4,
	   group_by => F@_5, group_offset => F@_6,
	   group_limit => F@_7},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{index => F@_1}
	 end,
    if F@_8 == '$undef' -> S2;
       true -> S2#{group_sort => F@_8}
    end.

d_field_group_search_request_index(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_group_search_request_index(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_group_search_request_index(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_index(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_group_search_request(RestF, 0, 0,
					    if Prev == '$undef' -> NewFValue;
					       true ->
						   merge_msg_index(Prev,
								   NewFValue,
								   TrUserData)
					    end,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    F@_8, TrUserData).

d_field_group_search_request_query(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_group_search_request_query(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_group_search_request_query(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_group_search_request(RestF, 0, 0,
					    F@_1, NewFValue, F@_3, F@_4, F@_5,
					    F@_6, F@_7, F@_8, TrUserData).

d_field_group_search_request_limit(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_group_search_request_limit(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_group_search_request_limit(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_group_search_request(RestF, 0, 0,
					    F@_1, F@_2, NewFValue, F@_4, F@_5,
					    F@_6, F@_7, F@_8, TrUserData).

d_field_group_search_request_stale(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_group_search_request_stale(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_group_search_request_stale(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				   F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_group_search_request(RestF, 0, 0,
					    F@_1, F@_2, F@_3, NewFValue, F@_5,
					    F@_6, F@_7, F@_8, TrUserData).

d_field_group_search_request_group_by(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_group_search_request_group_by(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_group_search_request_group_by(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				      F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_group_search_request(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, NewFValue,
					    F@_6, F@_7, F@_8, TrUserData).

d_field_group_search_request_group_offset(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_group_search_request_group_offset(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7, F@_8,
					      TrUserData);
d_field_group_search_request_group_offset(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  _, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_group_search_request(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    NewFValue, F@_7, F@_8, TrUserData).

d_field_group_search_request_group_limit(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_group_search_request_group_limit(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8,
					     TrUserData);
d_field_group_search_request_group_limit(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, _, F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_group_search_request(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    NewFValue, F@_8, TrUserData).

d_field_group_search_request_group_sort(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_group_search_request_group_sort(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8,
					    TrUserData);
d_field_group_search_request_group_sort(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_sort(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_group_search_request(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7,
					    if Prev == '$undef' -> NewFValue;
					       true ->
						   merge_msg_sort(Prev,
								  NewFValue,
								  TrUserData)
					    end,
					    TrUserData).

skip_varint_group_search_request(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, TrUserData) ->
    skip_varint_group_search_request(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     TrUserData);
skip_varint_group_search_request(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, TrUserData) ->
    dfp_read_field_def_group_search_request(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, TrUserData).

skip_length_delimited_group_search_request(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    skip_length_delimited_group_search_request(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       TrUserData);
skip_length_delimited_group_search_request(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_group_search_request(Rest2, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, TrUserData).

skip_group_group_search_request(Bin, FNum, Z2, F@_1,
				F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_group_search_request(Rest, 0, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, TrUserData).

skip_32_group_search_request(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     TrUserData) ->
    dfp_read_field_def_group_search_request(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, TrUserData).

skip_64_group_search_request(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     TrUserData) ->
    dfp_read_field_def_group_search_request(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, TrUserData).

decode_msg_group_search_response(Bin, TrUserData) ->
    dfp_read_field_def_group_search_response(Bin, 0, 0,
					     id(0, TrUserData),
					     id(0, TrUserData),
					     id([], TrUserData), TrUserData).

dfp_read_field_def_group_search_response(<<8,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    d_field_group_search_response_matches(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_group_search_response(<<16,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    d_field_group_search_response_group_matches(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData);
dfp_read_field_def_group_search_response(<<26,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    d_field_group_search_response_groups(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
dfp_read_field_def_group_search_response(<<>>, 0, 0,
					 F@_1, F@_2, R1, TrUserData) ->
    S1 = #{matches => F@_1, group_matches => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{groups => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_group_search_response(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_group_search_response(Other, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_group_search_response(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_group_search_response(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
dg_read_field_def_group_search_response(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_group_search_response_matches(Rest, 0, 0, F@_1,
						F@_2, F@_3, TrUserData);
      16 ->
	  d_field_group_search_response_group_matches(Rest, 0, 0,
						      F@_1, F@_2, F@_3,
						      TrUserData);
      26 ->
	  d_field_group_search_response_groups(Rest, 0, 0, F@_1,
					       F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_group_search_response(Rest, 0, 0, F@_1,
						  F@_2, F@_3, TrUserData);
	    1 ->
		skip_64_group_search_response(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    2 ->
		skip_length_delimited_group_search_response(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    TrUserData);
	    3 ->
		skip_group_group_search_response(Rest, Key bsr 3, 0,
						 F@_1, F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_group_search_response(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData)
	  end
    end;
dg_read_field_def_group_search_response(<<>>, 0, 0,
					F@_1, F@_2, R1, TrUserData) ->
    S1 = #{matches => F@_1, group_matches => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{groups => lists_reverse(R1, TrUserData)}
    end.

d_field_group_search_response_matches(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_group_search_response_matches(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
d_field_group_search_response_matches(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_group_search_response(RestF, 0, 0,
					     NewFValue, F@_2, F@_3, TrUserData).

d_field_group_search_response_group_matches(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3,
					    TrUserData)
    when N < 57 ->
    d_field_group_search_response_group_matches(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						TrUserData);
d_field_group_search_response_group_matches(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, _, F@_3,
					    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_group_search_response(RestF, 0, 0,
					     F@_1, NewFValue, F@_3, TrUserData).

d_field_group_search_response_groups(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_group_search_response_groups(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
d_field_group_search_response_groups(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_group(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_group_search_response(RestF, 0, 0,
					     F@_1, F@_2,
					     cons(NewFValue, Prev, TrUserData),
					     TrUserData).

skip_varint_group_search_response(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_group_search_response(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData);
skip_varint_group_search_response(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_group_search_response(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_group_search_response(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3,
					    TrUserData)
    when N < 57 ->
    skip_length_delimited_group_search_response(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						TrUserData);
skip_length_delimited_group_search_response(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3,
					    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_group_search_response(Rest2, 0, 0,
					     F@_1, F@_2, F@_3, TrUserData).

skip_group_group_search_response(Bin, FNum, Z2, F@_1,
				 F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_group_search_response(Rest, 0, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

skip_32_group_search_response(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_group_search_response(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

skip_64_group_search_response(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_group_search_response(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

decode_msg_group(Bin, TrUserData) ->
    dfp_read_field_def_group(Bin, 0, 0,
			     id(<<>>, TrUserData), id(0, TrUserData),
			     id([], TrUserData), TrUserData).

dfp_read_field_def_group(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    d_field_group_by(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
dfp_read_field_def_group(<<16, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    d_field_group_matches(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_group(<<26, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    d_field_group_hits(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
dfp_read_field_def_group(<<>>, 0, 0, F@_1, F@_2, R1,
			 TrUserData) ->
    S1 = #{by => F@_1, matches => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{hits => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_group(Other, Z1, Z2, F@_1, F@_2,
			 F@_3, TrUserData) ->
    dg_read_field_def_group(Other, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData).

dg_read_field_def_group(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_group(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_group(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_group_by(Rest, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData);
      16 ->
	  d_field_group_matches(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      26 ->
	  d_field_group_hits(Rest, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_group(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    1 ->
		skip_64_group(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_group(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData);
	    3 ->
		skip_group_group(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    5 ->
		skip_32_group(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_group(<<>>, 0, 0, F@_1, F@_2, R1,
			TrUserData) ->
    S1 = #{by => F@_1, matches => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{hits => lists_reverse(R1, TrUserData)}
    end.

d_field_group_by(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_group_by(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     F@_3, TrUserData);
d_field_group_by(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		 F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_group(RestF, 0, 0, NewFValue, F@_2,
			     F@_3, TrUserData).

d_field_group_matches(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_group_matches(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_group_matches(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_group(RestF, 0, 0, F@_1, NewFValue,
			     F@_3, TrUserData).

d_field_group_hits(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_group_hits(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, TrUserData);
d_field_group_hits(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_group_hit(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_group(RestF, 0, 0, F@_1, F@_2,
			     cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_group(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_group(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		      TrUserData);
skip_varint_group(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_group(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData).

skip_length_delimited_group(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_group(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_group(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_group(Rest2, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData).

skip_group_group(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_group(Rest, 0, Z2, F@_1, F@_2, F@_3,
			     TrUserData).

skip_32_group(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, TrUserData) ->
    dfp_read_field_def_group(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData).

skip_64_group(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, TrUserData) ->
    dfp_read_field_def_group(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData).

decode_msg_group_hit(Bin, TrUserData) ->
    dfp_read_field_def_group_hit(Bin, 0, 0,
				 id(<<>>, TrUserData), id([], TrUserData),
				 id([], TrUserData), TrUserData).

dfp_read_field_def_group_hit(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_group_hit_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
dfp_read_field_def_group_hit(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_group_hit_order(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_group_hit(<<26, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_group_hit_fields(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_group_hit(<<>>, 0, 0, F@_1, R1, R2,
			     TrUserData) ->
    S1 = #{id => F@_1},
    S2 = if R1 == '$undef' -> S1;
	    true -> S1#{order => lists_reverse(R1, TrUserData)}
	 end,
    if R2 == '$undef' -> S2;
       true -> S2#{fields => lists_reverse(R2, TrUserData)}
    end;
dfp_read_field_def_group_hit(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    dg_read_field_def_group_hit(Other, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

dg_read_field_def_group_hit(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_group_hit(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_group_hit(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_group_hit_id(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
      18 ->
	  d_field_group_hit_order(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      26 ->
	  d_field_group_hit_fields(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_group_hit(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    1 ->
		skip_64_group_hit(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    2 ->
		skip_length_delimited_group_hit(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    3 ->
		skip_group_group_hit(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, TrUserData);
	    5 ->
		skip_32_group_hit(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData)
	  end
    end;
dg_read_field_def_group_hit(<<>>, 0, 0, F@_1, R1, R2,
			    TrUserData) ->
    S1 = #{id => F@_1},
    S2 = if R1 == '$undef' -> S1;
	    true -> S1#{order => lists_reverse(R1, TrUserData)}
	 end,
    if R2 == '$undef' -> S2;
       true -> S2#{fields => lists_reverse(R2, TrUserData)}
    end.

d_field_group_hit_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_group_hit_id(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, TrUserData);
d_field_group_hit_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_group_hit(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, TrUserData).

d_field_group_hit_order(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_group_hit_order(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_group_hit_order(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_field_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_group_hit(RestF, 0, 0, F@_1,
				 cons(NewFValue, Prev, TrUserData), F@_3,
				 TrUserData).

d_field_group_hit_fields(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_group_hit_fields(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_group_hit_fields(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_hit_field(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_group_hit(RestF, 0, 0, F@_1, F@_2,
				 cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_group_hit(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_group_hit(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
skip_varint_group_hit(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_group_hit(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_length_delimited_group_hit(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_group_hit(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
skip_length_delimited_group_hit(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_group_hit(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, TrUserData).

skip_group_group_hit(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_group_hit(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_32_group_hit(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_group_hit(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_64_group_hit(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_group_hit(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

decode_msg_hit(Bin, TrUserData) ->
    dfp_read_field_def_hit(Bin, 0, 0, id(<<>>, TrUserData),
			   id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_hit(<<10, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    d_field_hit_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		   TrUserData);
dfp_read_field_def_hit(<<18, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    d_field_hit_order(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		      TrUserData);
dfp_read_field_def_hit(<<26, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    d_field_hit_fields(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
dfp_read_field_def_hit(<<>>, 0, 0, F@_1, R1, R2,
		       TrUserData) ->
    S1 = #{id => F@_1},
    S2 = if R1 == '$undef' -> S1;
	    true -> S1#{order => lists_reverse(R1, TrUserData)}
	 end,
    if R2 == '$undef' -> S2;
       true -> S2#{fields => lists_reverse(R2, TrUserData)}
    end;
dfp_read_field_def_hit(Other, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData) ->
    dg_read_field_def_hit(Other, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData).

dg_read_field_def_hit(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_hit(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
dg_read_field_def_hit(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_hit_id(Rest, 0, 0, F@_1, F@_2, F@_3,
			 TrUserData);
      18 ->
	  d_field_hit_order(Rest, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData);
      26 ->
	  d_field_hit_fields(Rest, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_hit(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    1 ->
		skip_64_hit(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_hit(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    3 ->
		skip_group_hit(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
			       TrUserData);
	    5 ->
		skip_32_hit(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_hit(<<>>, 0, 0, F@_1, R1, R2,
		      TrUserData) ->
    S1 = #{id => F@_1},
    S2 = if R1 == '$undef' -> S1;
	    true -> S1#{order => lists_reverse(R1, TrUserData)}
	 end,
    if R2 == '$undef' -> S2;
       true -> S2#{fields => lists_reverse(R2, TrUserData)}
    end.

d_field_hit_id(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1,
	       F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_hit_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		   F@_3, TrUserData);
d_field_hit_id(<<0:1, X:7, Rest/binary>>, N, Acc, _,
	       F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_hit(RestF, 0, 0, NewFValue, F@_2,
			   F@_3, TrUserData).

d_field_hit_order(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_hit_order(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, TrUserData);
d_field_hit_order(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_field_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_hit(RestF, 0, 0, F@_1,
			   cons(NewFValue, Prev, TrUserData), F@_3, TrUserData).

d_field_hit_fields(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_hit_fields(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, TrUserData);
d_field_hit_fields(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_hit_field(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_hit(RestF, 0, 0, F@_1, F@_2,
			   cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_hit(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    skip_varint_hit(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		    TrUserData);
skip_varint_hit(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_hit(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

skip_length_delimited_hit(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_hit(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_hit(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_hit(Rest2, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData).

skip_group_hit(Bin, FNum, Z2, F@_1, F@_2, F@_3,
	       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_hit(Rest, 0, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

skip_32_hit(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    F@_3, TrUserData) ->
    dfp_read_field_def_hit(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

skip_64_hit(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    F@_3, TrUserData) ->
    dfp_read_field_def_hit(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

decode_msg_document(Bin, TrUserData) ->
    dfp_read_field_def_document(Bin, 0, 0,
				id(<<>>, TrUserData), id([], TrUserData),
				TrUserData).

dfp_read_field_def_document(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_document_index(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_document(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_document_fields(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_document(<<>>, 0, 0, F@_1, R1,
			    TrUserData) ->
    S1 = #{index => F@_1},
    if R1 == '$undef' -> S1;
       true -> S1#{fields => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_document(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_document(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_document(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_document(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_document(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_document_index(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      18 ->
	  d_field_document_fields(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_document(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_document(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_document(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_document(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_document(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_document(<<>>, 0, 0, F@_1, R1,
			   TrUserData) ->
    S1 = #{index => F@_1},
    if R1 == '$undef' -> S1;
       true -> S1#{fields => lists_reverse(R1, TrUserData)}
    end.

d_field_document_index(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_document_index(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_document_index(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_document(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_document_fields(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_document_fields(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_document_fields(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_document_field(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_document(RestF, 0, 0, F@_1,
				cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_document(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_document(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_document(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_document(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_document(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_document(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_document(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_document(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_document(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_document(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_document(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_document(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_document(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_document(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

decode_msg_document_field(Bin, TrUserData) ->
    dfp_read_field_def_document_field(Bin, 0, 0,
				      id(<<>>, TrUserData),
				      id('$undef', TrUserData),
				      id(false, TrUserData),
				      id(false, TrUserData),
				      id(false, TrUserData), TrUserData).

dfp_read_field_def_document_field(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_document_field_name(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_document_field(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_document_field_value(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_document_field(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_document_field_analyzed(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_document_field(<<32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_document_field_stored(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_document_field(<<40, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_document_field_facet(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_document_field(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, _) ->
    S1 = #{name => F@_1, analyzed => F@_3, stored => F@_4,
	   facet => F@_5},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
dfp_read_field_def_document_field(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_document_field(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_document_field(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_document_field(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
dg_read_field_def_document_field(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_document_field_name(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      18 ->
	  d_field_document_field_value(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_document_field_analyzed(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      32 ->
	  d_field_document_field_stored(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
      40 ->
	  d_field_document_field_facet(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_document_field(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_document_field(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_document_field(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
	    3 ->
		skip_group_document_field(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_document_field(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_document_field(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, _) ->
    S1 = #{name => F@_1, analyzed => F@_3, stored => F@_4,
	   facet => F@_5},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

d_field_document_field_name(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_document_field_name(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_document_field_name(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_document_field(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, F@_5,
				      TrUserData).

d_field_document_field_value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_document_field_value(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_document_field_value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, Prev, F@_3, F@_4, F@_5,
			     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_field_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_document_field(RestF, 0, 0, F@_1,
				      if Prev == '$undef' -> NewFValue;
					 true ->
					     merge_msg_field_value(Prev,
								   NewFValue,
								   TrUserData)
				      end,
				      F@_3, F@_4, F@_5, TrUserData).

d_field_document_field_analyzed(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_document_field_analyzed(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_document_field_analyzed(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_document_field(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_document_field_stored(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_document_field_stored(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
d_field_document_field_stored(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_document_field(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_document_field_facet(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_document_field_facet(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_document_field_facet(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_document_field(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_document_field(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_document_field(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
skip_varint_document_field(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_document_field(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_document_field(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    skip_length_delimited_document_field(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
skip_length_delimited_document_field(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_document_field(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_document_field(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_document_field(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_document_field(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_document_field(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_document_field(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_document_field(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_hit_field(Bin, TrUserData) ->
    dfp_read_field_def_hit_field(Bin, 0, 0,
				 id(<<>>, TrUserData), id('$undef', TrUserData),
				 TrUserData).

dfp_read_field_def_hit_field(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_hit_field_name(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_hit_field(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_hit_field_value(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_hit_field(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    S1 = #{name => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
dfp_read_field_def_hit_field(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_hit_field(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_hit_field(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_hit_field(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_hit_field(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_hit_field_name(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      18 ->
	  d_field_hit_field_value(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_hit_field(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_hit_field(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_hit_field(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_hit_field(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_hit_field(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_hit_field(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    S1 = #{name => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

d_field_hit_field_name(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_hit_field_name(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_hit_field_name(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_hit_field(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_hit_field_value(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_hit_field_value(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_hit_field_value(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_field_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_hit_field(RestF, 0, 0, F@_1,
				 if Prev == '$undef' -> NewFValue;
				    true ->
					merge_msg_field_value(Prev, NewFValue,
							      TrUserData)
				 end,
				 TrUserData).

skip_varint_hit_field(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_hit_field(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_hit_field(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_hit_field(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_hit_field(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_hit_field(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_hit_field(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_hit_field(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_hit_field(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_hit_field(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_hit_field(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_hit_field(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_hit_field(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_hit_field(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

decode_msg_field_value(Bin, TrUserData) ->
    dfp_read_field_def_field_value(Bin, 0, 0,
				   id('$undef', TrUserData), TrUserData).

dfp_read_field_def_field_value(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_field_value_string_value(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_field_value(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_field_value_bool_value(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_field_value(<<25, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_field_value_double_value(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_field_value(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{value_oneof => F@_1}
    end;
dfp_read_field_def_field_value(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_field_value(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_field_value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_field_value(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_field_value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_field_value_string_value(Rest, 0, 0, F@_1,
					   TrUserData);
      16 ->
	  d_field_field_value_bool_value(Rest, 0, 0, F@_1,
					 TrUserData);
      25 ->
	  d_field_field_value_double_value(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_field_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_field_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_field_value(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_field_value(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_field_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_field_value(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{value_oneof => F@_1}
    end.

d_field_field_value_string_value(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_field_value_string_value(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_field_value_string_value(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_field_value(RestF, 0, 0,
				   id({string_value, NewFValue}, TrUserData),
				   TrUserData).

d_field_field_value_bool_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_field_value_bool_value(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_field_value_bool_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_field_value(RestF, 0, 0,
				   id({bool_value, NewFValue}, TrUserData),
				   TrUserData).

d_field_field_value_double_value(<<0:48, 240, 127,
				   Rest/binary>>,
				 Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_field_value(Rest, Z1, Z2,
				   id({double_value, id(infinity, TrUserData)},
				      TrUserData),
				   TrUserData);
d_field_field_value_double_value(<<0:48, 240, 255,
				   Rest/binary>>,
				 Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_field_value(Rest, Z1, Z2,
				   id({double_value,
				       id('-infinity', TrUserData)},
				      TrUserData),
				   TrUserData);
d_field_field_value_double_value(<<_:48, 15:4, _:4, _:1,
				   127:7, Rest/binary>>,
				 Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_field_value(Rest, Z1, Z2,
				   id({double_value, id(nan, TrUserData)},
				      TrUserData),
				   TrUserData);
d_field_field_value_double_value(<<Value:64/little-float,
				   Rest/binary>>,
				 Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_field_value(Rest, Z1, Z2,
				   id({double_value, id(Value, TrUserData)},
				      TrUserData),
				   TrUserData).

skip_varint_field_value(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_field_value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_field_value(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_field_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_field_value(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_field_value(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_field_value(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_field_value(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_field_value(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_field_value(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_field_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_field_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_field_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_field_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_search_term(Bin, TrUserData) ->
    dfp_read_field_def_search_term(Bin, 0, 0,
				   id(<<>>, TrUserData), id(<<>>, TrUserData),
				   TrUserData).

dfp_read_field_def_search_term(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_search_term_field(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_search_term(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_search_term_value(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_search_term(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #{field => F@_1, value => F@_2};
dfp_read_field_def_search_term(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_search_term(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_search_term(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_search_term(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_search_term(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_search_term_field(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_search_term_value(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_search_term(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_search_term(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_search_term(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_search_term(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_search_term(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_search_term(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #{field => F@_1, value => F@_2}.

d_field_search_term_field(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_search_term_field(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_search_term_field(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_search_term(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_search_term_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_search_term_value(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_search_term_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_search_term(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_search_term(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_search_term(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_search_term(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_search_term(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_search_term(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_search_term(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_search_term(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_search_term(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_search_term(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_search_term(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_search_term(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_search_term(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_search_term(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_search_term(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

decode_msg_document_update(Bin, TrUserData) ->
    dfp_read_field_def_document_update(Bin, 0, 0,
				       id('$undef', TrUserData),
				       id(<<>>, TrUserData), id([], TrUserData),
				       TrUserData).

dfp_read_field_def_document_update(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_document_update_index(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_document_update(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_document_update_id(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_document_update(<<26, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_document_update_fields(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_document_update(<<>>, 0, 0, F@_1,
				   F@_2, R1, TrUserData) ->
    S1 = #{id => F@_2},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{index => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{fields => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_document_update(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, TrUserData) ->
    dg_read_field_def_document_update(Other, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

dg_read_field_def_document_update(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_document_update(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
dg_read_field_def_document_update(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_document_update_index(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      18 ->
	  d_field_document_update_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      26 ->
	  d_field_document_update_fields(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_document_update(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData);
	    1 ->
		skip_64_document_update(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
	    2 ->
		skip_length_delimited_document_update(Rest, 0, 0, F@_1,
						      F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_document_update(Rest, Key bsr 3, 0, F@_1,
					   F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_document_update(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData)
	  end
    end;
dg_read_field_def_document_update(<<>>, 0, 0, F@_1,
				  F@_2, R1, TrUserData) ->
    S1 = #{id => F@_2},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{index => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{fields => lists_reverse(R1, TrUserData)}
    end.

d_field_document_update_index(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_document_update_index(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_document_update_index(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_index(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_document_update(RestF, 0, 0,
				       if Prev == '$undef' -> NewFValue;
					  true ->
					      merge_msg_index(Prev, NewFValue,
							      TrUserData)
				       end,
				       F@_2, F@_3, TrUserData).

d_field_document_update_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_document_update_id(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_document_update_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_document_update(RestF, 0, 0, F@_1,
				       NewFValue, F@_3, TrUserData).

d_field_document_update_fields(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_document_update_fields(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_document_update_fields(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_document_field(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_document_update(RestF, 0, 0, F@_1,
				       F@_2, cons(NewFValue, Prev, TrUserData),
				       TrUserData).

skip_varint_document_update(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_document_update(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
skip_varint_document_update(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_document_update(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

skip_length_delimited_document_update(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_document_update(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
skip_length_delimited_document_update(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_document_update(Rest2, 0, 0, F@_1,
				       F@_2, F@_3, TrUserData).

skip_group_document_update(Bin, FNum, Z2, F@_1, F@_2,
			   F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_document_update(Rest, 0, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

skip_32_document_update(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_document_update(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

skip_64_document_update(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_document_update(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

decode_msg_update_seq(Bin, TrUserData) ->
    dfp_read_field_def_update_seq(Bin, 0, 0,
				  id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_update_seq(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_update_seq_seq(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_update_seq(<<>>, 0, 0, F@_1, _) ->
    #{seq => F@_1};
dfp_read_field_def_update_seq(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_update_seq(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_update_seq(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_update_seq(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_update_seq(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_update_seq_seq(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_update_seq(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_update_seq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_update_seq(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_update_seq(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_update_seq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_update_seq(<<>>, 0, 0, F@_1, _) ->
    #{seq => F@_1}.

d_field_update_seq_seq(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_update_seq_seq(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
d_field_update_seq_seq(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_update_seq(RestF, 0, 0, NewFValue,
				  TrUserData).

skip_varint_update_seq(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_update_seq(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_update_seq(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_update_seq(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_update_seq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_update_seq(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_update_seq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_update_seq(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_update_seq(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_update_seq(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_update_seq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_update_seq(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_update_seq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_update_seq(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_set_update_seq(Bin, TrUserData) ->
    dfp_read_field_def_set_update_seq(Bin, 0, 0,
				      id('$undef', TrUserData),
				      id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_set_update_seq(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_set_update_seq_index(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_set_update_seq(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_set_update_seq_seq(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_set_update_seq(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    S1 = #{seq => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{index => F@_1}
    end;
dfp_read_field_def_set_update_seq(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_set_update_seq(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_set_update_seq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_set_update_seq(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_set_update_seq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_set_update_seq_index(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      18 ->
	  d_field_set_update_seq_seq(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_set_update_seq(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_set_update_seq(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_set_update_seq(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_set_update_seq(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_set_update_seq(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_set_update_seq(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    S1 = #{seq => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{index => F@_1}
    end.

d_field_set_update_seq_index(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_set_update_seq_index(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_set_update_seq_index(<<0:1, X:7, Rest/binary>>,
			     N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_index(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_set_update_seq(RestF, 0, 0,
				      if Prev == '$undef' -> NewFValue;
					 true ->
					     merge_msg_index(Prev, NewFValue,
							     TrUserData)
				      end,
				      F@_2, TrUserData).

d_field_set_update_seq_seq(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_set_update_seq_seq(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_set_update_seq_seq(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_set_update_seq(RestF, 0, 0, F@_1,
				      NewFValue, TrUserData).

skip_varint_set_update_seq(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_set_update_seq(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_set_update_seq(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_set_update_seq(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_set_update_seq(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_set_update_seq(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_set_update_seq(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_set_update_seq(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_set_update_seq(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_set_update_seq(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_set_update_seq(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_set_update_seq(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_set_update_seq(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_set_update_seq(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

decode_msg_service_response(Bin, TrUserData) ->
    dfp_read_field_def_service_response(Bin, 0, 0,
					id(0, TrUserData), id(<<>>, TrUserData),
					TrUserData).

dfp_read_field_def_service_response(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_service_response_code(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_service_response(<<18, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_service_response_reason(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_service_response(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #{code => F@_1, reason => F@_2};
dfp_read_field_def_service_response(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData) ->
    dg_read_field_def_service_response(Other, Z1, Z2, F@_1,
				       F@_2, TrUserData).

dg_read_field_def_service_response(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_service_response(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_service_response(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_service_response_code(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      18 ->
	  d_field_service_response_reason(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_service_response(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    1 ->
		skip_64_service_response(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    2 ->
		skip_length_delimited_service_response(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    3 ->
		skip_group_service_response(Rest, Key bsr 3, 0, F@_1,
					    F@_2, TrUserData);
	    5 ->
		skip_32_service_response(Rest, 0, 0, F@_1, F@_2,
					 TrUserData)
	  end
    end;
dg_read_field_def_service_response(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #{code => F@_1, reason => F@_2}.

d_field_service_response_code(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_service_response_code(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_service_response_code(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_service_response(RestF, 0, 0,
					NewFValue, F@_2, TrUserData).

d_field_service_response_reason(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_service_response_reason(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_service_response_reason(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_service_response(RestF, 0, 0, F@_1,
					NewFValue, TrUserData).

skip_varint_service_response(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_service_response(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
skip_varint_service_response(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_service_response(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

skip_length_delimited_service_response(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_service_response(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
skip_length_delimited_service_response(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_service_response(Rest2, 0, 0, F@_1,
					F@_2, TrUserData).

skip_group_service_response(Bin, FNum, Z2, F@_1, F@_2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_service_response(Rest, 0, Z2, F@_1,
					F@_2, TrUserData).

skip_32_service_response(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_service_response(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

skip_64_service_response(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_service_response(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      index -> merge_msg_index(Prev, New, TrUserData);
      info_response ->
	  merge_msg_info_response(Prev, New, TrUserData);
      sort -> merge_msg_sort(Prev, New, TrUserData);
      search_request ->
	  merge_msg_search_request(Prev, New, TrUserData);
      search_response ->
	  merge_msg_search_response(Prev, New, TrUserData);
      group_search_request ->
	  merge_msg_group_search_request(Prev, New, TrUserData);
      group_search_response ->
	  merge_msg_group_search_response(Prev, New, TrUserData);
      group -> merge_msg_group(Prev, New, TrUserData);
      group_hit -> merge_msg_group_hit(Prev, New, TrUserData);
      hit -> merge_msg_hit(Prev, New, TrUserData);
      document -> merge_msg_document(Prev, New, TrUserData);
      document_field ->
	  merge_msg_document_field(Prev, New, TrUserData);
      hit_field -> merge_msg_hit_field(Prev, New, TrUserData);
      field_value ->
	  merge_msg_field_value(Prev, New, TrUserData);
      search_term ->
	  merge_msg_search_term(Prev, New, TrUserData);
      document_update ->
	  merge_msg_document_update(Prev, New, TrUserData);
      update_seq ->
	  merge_msg_update_seq(Prev, New, TrUserData);
      set_update_seq ->
	  merge_msg_set_update_seq(Prev, New, TrUserData);
      service_response ->
	  merge_msg_service_response(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_index/3}).
merge_msg_index(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{prefix := NFprefix}} -> S1#{prefix => NFprefix};
      {#{prefix := PFprefix}, _} -> S1#{prefix => PFprefix};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_info_response/3}).
merge_msg_info_response(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{size := NFsize}} -> S1#{size => NFsize};
	   {#{size := PFsize}, _} -> S1#{size => PFsize};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{doc_count := NFdoc_count}} ->
	       S2#{doc_count => NFdoc_count};
	   {#{doc_count := PFdoc_count}, _} ->
	       S2#{doc_count => PFdoc_count};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{doc_del_count := NFdoc_del_count}} ->
	       S3#{doc_del_count => NFdoc_del_count};
	   {#{doc_del_count := PFdoc_del_count}, _} ->
	       S3#{doc_del_count => PFdoc_del_count};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{committed_seq := NFcommitted_seq}} ->
	       S4#{committed_seq => NFcommitted_seq};
	   {#{committed_seq := PFcommitted_seq}, _} ->
	       S4#{committed_seq => PFcommitted_seq};
	   _ -> S4
	 end,
    case {PMsg, NMsg} of
      {_, #{purge_seq := NFpurge_seq}} ->
	  S5#{purge_seq => NFpurge_seq};
      {#{purge_seq := PFpurge_seq}, _} ->
	  S5#{purge_seq => PFpurge_seq};
      _ -> S5
    end.

-compile({nowarn_unused_function,merge_msg_sort/3}).
merge_msg_sort(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{fields := PFfields}, #{fields := NFfields}} ->
	  S1#{fields =>
		  'erlang_++'(PFfields, NFfields, TrUserData)};
      {_, #{fields := NFfields}} -> S1#{fields => NFfields};
      {#{fields := PFfields}, _} -> S1#{fields => PFfields};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_search_request/3}).
merge_msg_search_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{index := PFindex}, #{index := NFindex}} ->
	       S1#{index =>
		       merge_msg_index(PFindex, NFindex, TrUserData)};
	   {_, #{index := NFindex}} -> S1#{index => NFindex};
	   {#{index := PFindex}, _} -> S1#{index => PFindex};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{query := NFquery}} -> S2#{query => NFquery};
	   {#{query := PFquery}, _} -> S2#{query => PFquery};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{limit := NFlimit}} -> S3#{limit => NFlimit};
	   {#{limit := PFlimit}, _} -> S3#{limit => PFlimit};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{stale := NFstale}} -> S4#{stale => NFstale};
	   {#{stale := PFstale}, _} -> S4#{stale => PFstale};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {#{sort := PFsort}, #{sort := NFsort}} ->
	       S5#{sort => merge_msg_sort(PFsort, NFsort, TrUserData)};
	   {_, #{sort := NFsort}} -> S5#{sort => NFsort};
	   {#{sort := PFsort}, _} -> S5#{sort => PFsort};
	   {_, _} -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{partition := NFpartition}} ->
	       S6#{partition => NFpartition};
	   {#{partition := PFpartition}, _} ->
	       S6#{partition => PFpartition};
	   _ -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {#{counts := PFcounts}, #{counts := NFcounts}} ->
	       S7#{counts =>
		       'erlang_++'(PFcounts, NFcounts, TrUserData)};
	   {_, #{counts := NFcounts}} -> S7#{counts => NFcounts};
	   {#{counts := PFcounts}, _} -> S7#{counts => PFcounts};
	   {_, _} -> S7
	 end,
    S9 = case {PMsg, NMsg} of
	   {_, #{ranges := NFranges}} -> S8#{ranges => NFranges};
	   {#{ranges := PFranges}, _} -> S8#{ranges => PFranges};
	   _ -> S8
	 end,
    S10 = case {PMsg, NMsg} of
	    {_, #{drilldown := NFdrilldown}} ->
		S9#{drilldown => NFdrilldown};
	    {#{drilldown := PFdrilldown}, _} ->
		S9#{drilldown => PFdrilldown};
	    _ -> S9
	  end,
    case {PMsg, NMsg} of
      {#{include_fields := PFinclude_fields},
       #{include_fields := NFinclude_fields}} ->
	  S10#{include_fields =>
		   'erlang_++'(PFinclude_fields, NFinclude_fields,
			       TrUserData)};
      {_, #{include_fields := NFinclude_fields}} ->
	  S10#{include_fields => NFinclude_fields};
      {#{include_fields := PFinclude_fields}, _} ->
	  S10#{include_fields => PFinclude_fields};
      {_, _} -> S10
    end.

-compile({nowarn_unused_function,merge_msg_search_response/3}).
merge_msg_search_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{matches := NFmatches}} ->
	       S1#{matches => NFmatches};
	   {#{matches := PFmatches}, _} ->
	       S1#{matches => PFmatches};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{hits := PFhits}, #{hits := NFhits}} ->
	  S2#{hits => 'erlang_++'(PFhits, NFhits, TrUserData)};
      {_, #{hits := NFhits}} -> S2#{hits => NFhits};
      {#{hits := PFhits}, _} -> S2#{hits => PFhits};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_group_search_request/3}).
merge_msg_group_search_request(PMsg, NMsg,
			       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{index := PFindex}, #{index := NFindex}} ->
	       S1#{index =>
		       merge_msg_index(PFindex, NFindex, TrUserData)};
	   {_, #{index := NFindex}} -> S1#{index => NFindex};
	   {#{index := PFindex}, _} -> S1#{index => PFindex};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{query := NFquery}} -> S2#{query => NFquery};
	   {#{query := PFquery}, _} -> S2#{query => PFquery};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{limit := NFlimit}} -> S3#{limit => NFlimit};
	   {#{limit := PFlimit}, _} -> S3#{limit => PFlimit};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{stale := NFstale}} -> S4#{stale => NFstale};
	   {#{stale := PFstale}, _} -> S4#{stale => PFstale};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{group_by := NFgroup_by}} ->
	       S5#{group_by => NFgroup_by};
	   {#{group_by := PFgroup_by}, _} ->
	       S5#{group_by => PFgroup_by};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{group_offset := NFgroup_offset}} ->
	       S6#{group_offset => NFgroup_offset};
	   {#{group_offset := PFgroup_offset}, _} ->
	       S6#{group_offset => PFgroup_offset};
	   _ -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {_, #{group_limit := NFgroup_limit}} ->
	       S7#{group_limit => NFgroup_limit};
	   {#{group_limit := PFgroup_limit}, _} ->
	       S7#{group_limit => PFgroup_limit};
	   _ -> S7
	 end,
    case {PMsg, NMsg} of
      {#{group_sort := PFgroup_sort},
       #{group_sort := NFgroup_sort}} ->
	  S8#{group_sort =>
		  merge_msg_sort(PFgroup_sort, NFgroup_sort, TrUserData)};
      {_, #{group_sort := NFgroup_sort}} ->
	  S8#{group_sort => NFgroup_sort};
      {#{group_sort := PFgroup_sort}, _} ->
	  S8#{group_sort => PFgroup_sort};
      {_, _} -> S8
    end.

-compile({nowarn_unused_function,merge_msg_group_search_response/3}).
merge_msg_group_search_response(PMsg, NMsg,
				TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{matches := NFmatches}} ->
	       S1#{matches => NFmatches};
	   {#{matches := PFmatches}, _} ->
	       S1#{matches => PFmatches};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{group_matches := NFgroup_matches}} ->
	       S2#{group_matches => NFgroup_matches};
	   {#{group_matches := PFgroup_matches}, _} ->
	       S2#{group_matches => PFgroup_matches};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {#{groups := PFgroups}, #{groups := NFgroups}} ->
	  S3#{groups =>
		  'erlang_++'(PFgroups, NFgroups, TrUserData)};
      {_, #{groups := NFgroups}} -> S3#{groups => NFgroups};
      {#{groups := PFgroups}, _} -> S3#{groups => PFgroups};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_group/3}).
merge_msg_group(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{by := NFby}} -> S1#{by => NFby};
	   {#{by := PFby}, _} -> S1#{by => PFby};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{matches := NFmatches}} ->
	       S2#{matches => NFmatches};
	   {#{matches := PFmatches}, _} ->
	       S2#{matches => PFmatches};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {#{hits := PFhits}, #{hits := NFhits}} ->
	  S3#{hits => 'erlang_++'(PFhits, NFhits, TrUserData)};
      {_, #{hits := NFhits}} -> S3#{hits => NFhits};
      {#{hits := PFhits}, _} -> S3#{hits => PFhits};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_group_hit/3}).
merge_msg_group_hit(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{id := NFid}} -> S1#{id => NFid};
	   {#{id := PFid}, _} -> S1#{id => PFid};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{order := PForder}, #{order := NForder}} ->
	       S2#{order => 'erlang_++'(PForder, NForder, TrUserData)};
	   {_, #{order := NForder}} -> S2#{order => NForder};
	   {#{order := PForder}, _} -> S2#{order => PForder};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{fields := PFfields}, #{fields := NFfields}} ->
	  S3#{fields =>
		  'erlang_++'(PFfields, NFfields, TrUserData)};
      {_, #{fields := NFfields}} -> S3#{fields => NFfields};
      {#{fields := PFfields}, _} -> S3#{fields => PFfields};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_hit/3}).
merge_msg_hit(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{id := NFid}} -> S1#{id => NFid};
	   {#{id := PFid}, _} -> S1#{id => PFid};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{order := PForder}, #{order := NForder}} ->
	       S2#{order => 'erlang_++'(PForder, NForder, TrUserData)};
	   {_, #{order := NForder}} -> S2#{order => NForder};
	   {#{order := PForder}, _} -> S2#{order => PForder};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{fields := PFfields}, #{fields := NFfields}} ->
	  S3#{fields =>
		  'erlang_++'(PFfields, NFfields, TrUserData)};
      {_, #{fields := NFfields}} -> S3#{fields => NFfields};
      {#{fields := PFfields}, _} -> S3#{fields => PFfields};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_document/3}).
merge_msg_document(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{index := NFindex}} -> S1#{index => NFindex};
	   {#{index := PFindex}, _} -> S1#{index => PFindex};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{fields := PFfields}, #{fields := NFfields}} ->
	  S2#{fields =>
		  'erlang_++'(PFfields, NFfields, TrUserData)};
      {_, #{fields := NFfields}} -> S2#{fields => NFfields};
      {#{fields := PFfields}, _} -> S2#{fields => PFfields};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_document_field/3}).
merge_msg_document_field(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S1#{name => NFname};
	   {#{name := PFname}, _} -> S1#{name => PFname};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{value := PFvalue}, #{value := NFvalue}} ->
	       S2#{value =>
		       merge_msg_field_value(PFvalue, NFvalue, TrUserData)};
	   {_, #{value := NFvalue}} -> S2#{value => NFvalue};
	   {#{value := PFvalue}, _} -> S2#{value => PFvalue};
	   {_, _} -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{analyzed := NFanalyzed}} ->
	       S3#{analyzed => NFanalyzed};
	   {#{analyzed := PFanalyzed}, _} ->
	       S3#{analyzed => PFanalyzed};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{stored := NFstored}} -> S4#{stored => NFstored};
	   {#{stored := PFstored}, _} -> S4#{stored => PFstored};
	   _ -> S4
	 end,
    case {PMsg, NMsg} of
      {_, #{facet := NFfacet}} -> S5#{facet => NFfacet};
      {#{facet := PFfacet}, _} -> S5#{facet => PFfacet};
      _ -> S5
    end.

-compile({nowarn_unused_function,merge_msg_hit_field/3}).
merge_msg_hit_field(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S1#{name => NFname};
	   {#{name := PFname}, _} -> S1#{name => PFname};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{value := PFvalue}, #{value := NFvalue}} ->
	  S2#{value =>
		  merge_msg_field_value(PFvalue, NFvalue, TrUserData)};
      {_, #{value := NFvalue}} -> S2#{value => NFvalue};
      {#{value := PFvalue}, _} -> S2#{value => PFvalue};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_field_value/3}).
merge_msg_field_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value_oneof := NFvalue_oneof}} ->
	  S1#{value_oneof => NFvalue_oneof};
      {#{value_oneof := PFvalue_oneof}, _} ->
	  S1#{value_oneof => PFvalue_oneof};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_search_term/3}).
merge_msg_search_term(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{field := NFfield}} -> S1#{field => NFfield};
	   {#{field := PFfield}, _} -> S1#{field => PFfield};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S2#{value => NFvalue};
      {#{value := PFvalue}, _} -> S2#{value => PFvalue};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_document_update/3}).
merge_msg_document_update(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{index := PFindex}, #{index := NFindex}} ->
	       S1#{index =>
		       merge_msg_index(PFindex, NFindex, TrUserData)};
	   {_, #{index := NFindex}} -> S1#{index => NFindex};
	   {#{index := PFindex}, _} -> S1#{index => PFindex};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{id := NFid}} -> S2#{id => NFid};
	   {#{id := PFid}, _} -> S2#{id => PFid};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {#{fields := PFfields}, #{fields := NFfields}} ->
	  S3#{fields =>
		  'erlang_++'(PFfields, NFfields, TrUserData)};
      {_, #{fields := NFfields}} -> S3#{fields => NFfields};
      {#{fields := PFfields}, _} -> S3#{fields => PFfields};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_update_seq/3}).
merge_msg_update_seq(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{seq := NFseq}} -> S1#{seq => NFseq};
      {#{seq := PFseq}, _} -> S1#{seq => PFseq};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_set_update_seq/3}).
merge_msg_set_update_seq(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{index := PFindex}, #{index := NFindex}} ->
	       S1#{index =>
		       merge_msg_index(PFindex, NFindex, TrUserData)};
	   {_, #{index := NFindex}} -> S1#{index => NFindex};
	   {#{index := PFindex}, _} -> S1#{index => PFindex};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{seq := NFseq}} -> S2#{seq => NFseq};
      {#{seq := PFseq}, _} -> S2#{seq => PFseq};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_service_response/3}).
merge_msg_service_response(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{code := NFcode}} -> S1#{code => NFcode};
	   {#{code := PFcode}, _} -> S1#{code => PFcode};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{reason := NFreason}} -> S2#{reason => NFreason};
      {#{reason := PFreason}, _} -> S2#{reason => PFreason};
      _ -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      index -> v_msg_index(Msg, [MsgName], TrUserData);
      info_response ->
	  v_msg_info_response(Msg, [MsgName], TrUserData);
      sort -> v_msg_sort(Msg, [MsgName], TrUserData);
      search_request ->
	  v_msg_search_request(Msg, [MsgName], TrUserData);
      search_response ->
	  v_msg_search_response(Msg, [MsgName], TrUserData);
      group_search_request ->
	  v_msg_group_search_request(Msg, [MsgName], TrUserData);
      group_search_response ->
	  v_msg_group_search_response(Msg, [MsgName], TrUserData);
      group -> v_msg_group(Msg, [MsgName], TrUserData);
      group_hit ->
	  v_msg_group_hit(Msg, [MsgName], TrUserData);
      hit -> v_msg_hit(Msg, [MsgName], TrUserData);
      document -> v_msg_document(Msg, [MsgName], TrUserData);
      document_field ->
	  v_msg_document_field(Msg, [MsgName], TrUserData);
      hit_field ->
	  v_msg_hit_field(Msg, [MsgName], TrUserData);
      field_value ->
	  v_msg_field_value(Msg, [MsgName], TrUserData);
      search_term ->
	  v_msg_search_term(Msg, [MsgName], TrUserData);
      document_update ->
	  v_msg_document_update(Msg, [MsgName], TrUserData);
      update_seq ->
	  v_msg_update_seq(Msg, [MsgName], TrUserData);
      set_update_seq ->
	  v_msg_set_update_seq(Msg, [MsgName], TrUserData);
      service_response ->
	  v_msg_service_response(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_index/3}).
-dialyzer({nowarn_function,v_msg_index/3}).
v_msg_index(#{} = M, Path, TrUserData) ->
    case M of
      #{prefix := F1} ->
	  v_type_bytes(F1, [prefix | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (prefix) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_index(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   index},
		  M, Path);
v_msg_index(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, index}, X, Path).

-compile({nowarn_unused_function,v_msg_info_response/3}).
-dialyzer({nowarn_function,v_msg_info_response/3}).
v_msg_info_response(#{} = M, Path, TrUserData) ->
    case M of
      #{size := F1} ->
	  v_type_uint64(F1, [size | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{doc_count := F2} ->
	  v_type_uint32(F2, [doc_count | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{doc_del_count := F3} ->
	  v_type_uint32(F3, [doc_del_count | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{committed_seq := F4} ->
	  v_type_string(F4, [committed_seq | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{purge_seq := F5} ->
	  v_type_string(F5, [purge_seq | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (size) -> ok;
		      (doc_count) -> ok;
		      (doc_del_count) -> ok;
		      (committed_seq) -> ok;
		      (purge_seq) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_info_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   info_response},
		  M, Path);
v_msg_info_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, info_response}, X, Path).

-compile({nowarn_unused_function,v_msg_sort/3}).
-dialyzer({nowarn_function,v_msg_sort/3}).
v_msg_sort(#{} = M, Path, TrUserData) ->
    case M of
      #{fields := F1} ->
	  if is_list(F1) ->
		 _ = [v_type_string(Elem, [fields | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, string}, F1,
			       [fields | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (fields) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_sort(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   sort},
		  M, Path);
v_msg_sort(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, sort}, X, Path).

-compile({nowarn_unused_function,v_msg_search_request/3}).
-dialyzer({nowarn_function,v_msg_search_request/3}).
v_msg_search_request(#{} = M, Path, TrUserData) ->
    case M of
      #{index := F1} ->
	  v_msg_index(F1, [index | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{query := F2} ->
	  v_type_string(F2, [query | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{limit := F3} ->
	  v_type_uint32(F3, [limit | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{stale := F4} ->
	  v_type_bool(F4, [stale | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{sort := F5} ->
	  v_msg_sort(F5, [sort | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{partition := F6} ->
	  v_type_string(F6, [partition | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{counts := F7} ->
	  if is_list(F7) ->
		 _ = [v_type_string(Elem, [counts | Path], TrUserData)
		      || Elem <- F7],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, string}, F7,
			       [counts | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{ranges := F8} ->
	  v_type_string(F8, [ranges | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{drilldown := F9} ->
	  v_type_string(F9, [drilldown | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{include_fields := F10} ->
	  if is_list(F10) ->
		 _ = [v_type_string(Elem, [include_fields | Path],
				    TrUserData)
		      || Elem <- F10],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, string}, F10,
			       [include_fields | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (index) -> ok;
		      (query) -> ok;
		      (limit) -> ok;
		      (stale) -> ok;
		      (sort) -> ok;
		      (partition) -> ok;
		      (counts) -> ok;
		      (ranges) -> ok;
		      (drilldown) -> ok;
		      (include_fields) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_search_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   search_request},
		  M, Path);
v_msg_search_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, search_request}, X, Path).

-compile({nowarn_unused_function,v_msg_search_response/3}).
-dialyzer({nowarn_function,v_msg_search_response/3}).
v_msg_search_response(#{} = M, Path, TrUserData) ->
    case M of
      #{matches := F1} ->
	  v_type_uint64(F1, [matches | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{hits := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_hit(Elem, [hits | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, hit}}, F2,
			       [hits | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (matches) -> ok;
		      (hits) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_search_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   search_response},
		  M, Path);
v_msg_search_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, search_response}, X, Path).

-compile({nowarn_unused_function,v_msg_group_search_request/3}).
-dialyzer({nowarn_function,v_msg_group_search_request/3}).
v_msg_group_search_request(#{} = M, Path, TrUserData) ->
    case M of
      #{index := F1} ->
	  v_msg_index(F1, [index | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{query := F2} ->
	  v_type_string(F2, [query | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{limit := F3} ->
	  v_type_uint32(F3, [limit | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{stale := F4} ->
	  v_type_bool(F4, [stale | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{group_by := F5} ->
	  v_type_string(F5, [group_by | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{group_offset := F6} ->
	  v_type_uint32(F6, [group_offset | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{group_limit := F7} ->
	  v_type_uint32(F7, [group_limit | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{group_sort := F8} ->
	  v_msg_sort(F8, [group_sort | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (index) -> ok;
		      (query) -> ok;
		      (limit) -> ok;
		      (stale) -> ok;
		      (group_by) -> ok;
		      (group_offset) -> ok;
		      (group_limit) -> ok;
		      (group_sort) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_group_search_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   group_search_request},
		  M, Path);
v_msg_group_search_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, group_search_request}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_group_search_response/3}).
-dialyzer({nowarn_function,v_msg_group_search_response/3}).
v_msg_group_search_response(#{} = M, Path,
			    TrUserData) ->
    case M of
      #{matches := F1} ->
	  v_type_uint64(F1, [matches | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{group_matches := F2} ->
	  v_type_uint64(F2, [group_matches | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{groups := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_group(Elem, [groups | Path], TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, group}}, F3,
			       [groups | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (matches) -> ok;
		      (group_matches) -> ok;
		      (groups) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_group_search_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   group_search_response},
		  M, Path);
v_msg_group_search_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, group_search_response}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_group/3}).
-dialyzer({nowarn_function,v_msg_group/3}).
v_msg_group(#{} = M, Path, TrUserData) ->
    case M of
      #{by := F1} ->
	  v_type_string(F1, [by | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{matches := F2} ->
	  v_type_uint64(F2, [matches | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{hits := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_group_hit(Elem, [hits | Path], TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, group_hit}}, F3,
			       [hits | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (by) -> ok;
		      (matches) -> ok;
		      (hits) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_group(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   group},
		  M, Path);
v_msg_group(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, group}, X, Path).

-compile({nowarn_unused_function,v_msg_group_hit/3}).
-dialyzer({nowarn_function,v_msg_group_hit/3}).
v_msg_group_hit(#{} = M, Path, TrUserData) ->
    case M of
      #{id := F1} ->
	  v_type_string(F1, [id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{order := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_field_value(Elem, [order | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, field_value}}, F2,
			       [order | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{fields := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_hit_field(Elem, [fields | Path], TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, hit_field}}, F3,
			       [fields | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
		      (order) -> ok;
		      (fields) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_group_hit(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   group_hit},
		  M, Path);
v_msg_group_hit(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, group_hit}, X, Path).

-compile({nowarn_unused_function,v_msg_hit/3}).
-dialyzer({nowarn_function,v_msg_hit/3}).
v_msg_hit(#{} = M, Path, TrUserData) ->
    case M of
      #{id := F1} ->
	  v_type_string(F1, [id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{order := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_field_value(Elem, [order | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, field_value}}, F2,
			       [order | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{fields := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_hit_field(Elem, [fields | Path], TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, hit_field}}, F3,
			       [fields | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
		      (order) -> ok;
		      (fields) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_hit(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M), hit},
		  M, Path);
v_msg_hit(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, hit}, X, Path).

-compile({nowarn_unused_function,v_msg_document/3}).
-dialyzer({nowarn_function,v_msg_document/3}).
v_msg_document(#{} = M, Path, TrUserData) ->
    case M of
      #{index := F1} ->
	  v_type_string(F1, [index | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{fields := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_document_field(Elem, [fields | Path],
					   TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, document_field}},
			       F2, [fields | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (index) -> ok;
		      (fields) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_document(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   document},
		  M, Path);
v_msg_document(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, document}, X, Path).

-compile({nowarn_unused_function,v_msg_document_field/3}).
-dialyzer({nowarn_function,v_msg_document_field/3}).
v_msg_document_field(#{} = M, Path, TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := F2} ->
	  v_msg_field_value(F2, [value | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{analyzed := F3} ->
	  v_type_bool(F3, [analyzed | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{stored := F4} ->
	  v_type_bool(F4, [stored | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{facet := F5} ->
	  v_type_bool(F5, [facet | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (value) -> ok;
		      (analyzed) -> ok;
		      (stored) -> ok;
		      (facet) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_document_field(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   document_field},
		  M, Path);
v_msg_document_field(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, document_field}, X, Path).

-compile({nowarn_unused_function,v_msg_hit_field/3}).
-dialyzer({nowarn_function,v_msg_hit_field/3}).
v_msg_hit_field(#{} = M, Path, TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := F2} ->
	  v_msg_field_value(F2, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_hit_field(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   hit_field},
		  M, Path);
v_msg_hit_field(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, hit_field}, X, Path).

-compile({nowarn_unused_function,v_msg_field_value/3}).
-dialyzer({nowarn_function,v_msg_field_value/3}).
v_msg_field_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value_oneof := {string_value, OF1}} ->
	  v_type_string(OF1, [string_value, value_oneof | Path],
			TrUserData);
      #{value_oneof := {bool_value, OF1}} ->
	  v_type_bool(OF1, [bool_value, value_oneof | Path],
		      TrUserData);
      #{value_oneof := {double_value, OF1}} ->
	  v_type_double(OF1, [double_value, value_oneof | Path],
			TrUserData);
      #{value_oneof := F1} ->
	  mk_type_error(invalid_oneof, F1, [value_oneof | Path]);
      _ -> ok
    end,
    lists:foreach(fun (value_oneof) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_field_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   field_value},
		  M, Path);
v_msg_field_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, field_value}, X, Path).

-compile({nowarn_unused_function,v_msg_search_term/3}).
-dialyzer({nowarn_function,v_msg_search_term/3}).
v_msg_search_term(#{} = M, Path, TrUserData) ->
    case M of
      #{field := F1} ->
	  v_type_string(F1, [field | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := F2} ->
	  v_type_string(F2, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (field) -> ok;
		      (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_search_term(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   search_term},
		  M, Path);
v_msg_search_term(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, search_term}, X, Path).

-compile({nowarn_unused_function,v_msg_document_update/3}).
-dialyzer({nowarn_function,v_msg_document_update/3}).
v_msg_document_update(#{} = M, Path, TrUserData) ->
    case M of
      #{index := F1} ->
	  v_msg_index(F1, [index | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{id := F2} ->
	  v_type_string(F2, [id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{fields := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_document_field(Elem, [fields | Path],
					   TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, document_field}},
			       F3, [fields | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (index) -> ok;
		      (id) -> ok;
		      (fields) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_document_update(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   document_update},
		  M, Path);
v_msg_document_update(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, document_update}, X, Path).

-compile({nowarn_unused_function,v_msg_update_seq/3}).
-dialyzer({nowarn_function,v_msg_update_seq/3}).
v_msg_update_seq(#{} = M, Path, TrUserData) ->
    case M of
      #{seq := F1} ->
	  v_type_string(F1, [seq | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (seq) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_update_seq(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   update_seq},
		  M, Path);
v_msg_update_seq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, update_seq}, X, Path).

-compile({nowarn_unused_function,v_msg_set_update_seq/3}).
-dialyzer({nowarn_function,v_msg_set_update_seq/3}).
v_msg_set_update_seq(#{} = M, Path, TrUserData) ->
    case M of
      #{index := F1} ->
	  v_msg_index(F1, [index | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{seq := F2} ->
	  v_type_string(F2, [seq | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (index) -> ok;
		      (seq) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_set_update_seq(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   set_update_seq},
		  M, Path);
v_msg_set_update_seq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, set_update_seq}, X, Path).

-compile({nowarn_unused_function,v_msg_service_response/3}).
-dialyzer({nowarn_function,v_msg_service_response/3}).
v_msg_service_response(#{} = M, Path, TrUserData) ->
    case M of
      #{code := F1} ->
	  v_type_uint32(F1, [code | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{reason := F2} ->
	  v_type_string(F2, [reason | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
		      (reason) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_service_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   service_response},
		  M, Path);
v_msg_service_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, service_response}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, index},
      [#{name => prefix, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []}]},
     {{msg, info_response},
      [#{name => size, fnum => 1, rnum => 2, type => uint64,
	 occurrence => optional, opts => []},
       #{name => doc_count, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []},
       #{name => doc_del_count, fnum => 3, rnum => 4,
	 type => uint32, occurrence => optional, opts => []},
       #{name => committed_seq, fnum => 5, rnum => 5,
	 type => string, occurrence => optional, opts => []},
       #{name => purge_seq, fnum => 6, rnum => 6,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, sort},
      [#{name => fields, fnum => 1, rnum => 2, type => string,
	 occurrence => repeated, opts => []}]},
     {{msg, search_request},
      [#{name => index, fnum => 1, rnum => 2,
	 type => {msg, index}, occurrence => optional,
	 opts => []},
       #{name => query, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => limit, fnum => 3, rnum => 4, type => uint32,
	 occurrence => optional, opts => []},
       #{name => stale, fnum => 4, rnum => 5, type => bool,
	 occurrence => optional, opts => []},
       #{name => sort, fnum => 5, rnum => 6,
	 type => {msg, sort}, occurrence => optional,
	 opts => []},
       #{name => partition, fnum => 6, rnum => 7,
	 type => string, occurrence => optional, opts => []},
       #{name => counts, fnum => 7, rnum => 8, type => string,
	 occurrence => repeated, opts => []},
       #{name => ranges, fnum => 8, rnum => 9, type => string,
	 occurrence => optional, opts => []},
       #{name => drilldown, fnum => 9, rnum => 10,
	 type => string, occurrence => optional, opts => []},
       #{name => include_fields, fnum => 10, rnum => 11,
	 type => string, occurrence => repeated, opts => []}]},
     {{msg, search_response},
      [#{name => matches, fnum => 1, rnum => 2,
	 type => uint64, occurrence => optional, opts => []},
       #{name => hits, fnum => 2, rnum => 3,
	 type => {msg, hit}, occurrence => repeated,
	 opts => []}]},
     {{msg, group_search_request},
      [#{name => index, fnum => 1, rnum => 2,
	 type => {msg, index}, occurrence => optional,
	 opts => []},
       #{name => query, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => limit, fnum => 3, rnum => 4, type => uint32,
	 occurrence => optional, opts => []},
       #{name => stale, fnum => 4, rnum => 5, type => bool,
	 occurrence => optional, opts => []},
       #{name => group_by, fnum => 5, rnum => 6,
	 type => string, occurrence => optional, opts => []},
       #{name => group_offset, fnum => 6, rnum => 7,
	 type => uint32, occurrence => optional, opts => []},
       #{name => group_limit, fnum => 7, rnum => 8,
	 type => uint32, occurrence => optional, opts => []},
       #{name => group_sort, fnum => 8, rnum => 9,
	 type => {msg, sort}, occurrence => optional,
	 opts => []}]},
     {{msg, group_search_response},
      [#{name => matches, fnum => 1, rnum => 2,
	 type => uint64, occurrence => optional, opts => []},
       #{name => group_matches, fnum => 2, rnum => 3,
	 type => uint64, occurrence => optional, opts => []},
       #{name => groups, fnum => 3, rnum => 4,
	 type => {msg, group}, occurrence => repeated,
	 opts => []}]},
     {{msg, group},
      [#{name => by, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => matches, fnum => 2, rnum => 3, type => uint64,
	 occurrence => optional, opts => []},
       #{name => hits, fnum => 3, rnum => 4,
	 type => {msg, group_hit}, occurrence => repeated,
	 opts => []}]},
     {{msg, group_hit},
      [#{name => id, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => order, fnum => 2, rnum => 3,
	 type => {msg, field_value}, occurrence => repeated,
	 opts => []},
       #{name => fields, fnum => 3, rnum => 4,
	 type => {msg, hit_field}, occurrence => repeated,
	 opts => []}]},
     {{msg, hit},
      [#{name => id, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => order, fnum => 2, rnum => 3,
	 type => {msg, field_value}, occurrence => repeated,
	 opts => []},
       #{name => fields, fnum => 3, rnum => 4,
	 type => {msg, hit_field}, occurrence => repeated,
	 opts => []}]},
     {{msg, document},
      [#{name => index, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => fields, fnum => 2, rnum => 3,
	 type => {msg, document_field}, occurrence => repeated,
	 opts => []}]},
     {{msg, document_field},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => value, fnum => 2, rnum => 3,
	 type => {msg, field_value}, occurrence => optional,
	 opts => []},
       #{name => analyzed, fnum => 3, rnum => 4, type => bool,
	 occurrence => optional, opts => []},
       #{name => stored, fnum => 4, rnum => 5, type => bool,
	 occurrence => optional, opts => []},
       #{name => facet, fnum => 5, rnum => 6, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, hit_field},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => value, fnum => 2, rnum => 3,
	 type => {msg, field_value}, occurrence => optional,
	 opts => []}]},
     {{msg, field_value},
      [#{name => value_oneof, rnum => 2,
	 fields =>
	     [#{name => string_value, fnum => 1, rnum => 2,
		type => string, occurrence => optional, opts => []},
	      #{name => bool_value, fnum => 2, rnum => 2,
		type => bool, occurrence => optional, opts => []},
	      #{name => double_value, fnum => 3, rnum => 2,
		type => double, occurrence => optional, opts => []}]}]},
     {{msg, search_term},
      [#{name => field, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => value, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, document_update},
      [#{name => index, fnum => 1, rnum => 2,
	 type => {msg, index}, occurrence => optional,
	 opts => []},
       #{name => id, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => fields, fnum => 3, rnum => 4,
	 type => {msg, document_field}, occurrence => repeated,
	 opts => []}]},
     {{msg, update_seq},
      [#{name => seq, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, set_update_seq},
      [#{name => index, fnum => 1, rnum => 2,
	 type => {msg, index}, occurrence => optional,
	 opts => []},
       #{name => seq, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, service_response},
      [#{name => code, fnum => 1, rnum => 2, type => uint32,
	 occurrence => optional, opts => []},
       #{name => reason, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]}].


get_msg_names() ->
    [index, info_response, sort, search_request,
     search_response, group_search_request,
     group_search_response, group, group_hit, hit, document,
     document_field, hit_field, field_value, search_term,
     document_update, update_seq, set_update_seq,
     service_response].


get_group_names() -> [].


get_msg_or_group_names() ->
    [index, info_response, sort, search_request,
     search_response, group_search_request,
     group_search_response, group, group_hit, hit, document,
     document_field, hit_field, field_value, search_term,
     document_update, update_seq, set_update_seq,
     service_response].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(index) ->
    [#{name => prefix, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def(info_response) ->
    [#{name => size, fnum => 1, rnum => 2, type => uint64,
       occurrence => optional, opts => []},
     #{name => doc_count, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []},
     #{name => doc_del_count, fnum => 3, rnum => 4,
       type => uint32, occurrence => optional, opts => []},
     #{name => committed_seq, fnum => 5, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => purge_seq, fnum => 6, rnum => 6,
       type => string, occurrence => optional, opts => []}];
find_msg_def(sort) ->
    [#{name => fields, fnum => 1, rnum => 2, type => string,
       occurrence => repeated, opts => []}];
find_msg_def(search_request) ->
    [#{name => index, fnum => 1, rnum => 2,
       type => {msg, index}, occurrence => optional,
       opts => []},
     #{name => query, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => limit, fnum => 3, rnum => 4, type => uint32,
       occurrence => optional, opts => []},
     #{name => stale, fnum => 4, rnum => 5, type => bool,
       occurrence => optional, opts => []},
     #{name => sort, fnum => 5, rnum => 6,
       type => {msg, sort}, occurrence => optional,
       opts => []},
     #{name => partition, fnum => 6, rnum => 7,
       type => string, occurrence => optional, opts => []},
     #{name => counts, fnum => 7, rnum => 8, type => string,
       occurrence => repeated, opts => []},
     #{name => ranges, fnum => 8, rnum => 9, type => string,
       occurrence => optional, opts => []},
     #{name => drilldown, fnum => 9, rnum => 10,
       type => string, occurrence => optional, opts => []},
     #{name => include_fields, fnum => 10, rnum => 11,
       type => string, occurrence => repeated, opts => []}];
find_msg_def(search_response) ->
    [#{name => matches, fnum => 1, rnum => 2,
       type => uint64, occurrence => optional, opts => []},
     #{name => hits, fnum => 2, rnum => 3,
       type => {msg, hit}, occurrence => repeated,
       opts => []}];
find_msg_def(group_search_request) ->
    [#{name => index, fnum => 1, rnum => 2,
       type => {msg, index}, occurrence => optional,
       opts => []},
     #{name => query, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => limit, fnum => 3, rnum => 4, type => uint32,
       occurrence => optional, opts => []},
     #{name => stale, fnum => 4, rnum => 5, type => bool,
       occurrence => optional, opts => []},
     #{name => group_by, fnum => 5, rnum => 6,
       type => string, occurrence => optional, opts => []},
     #{name => group_offset, fnum => 6, rnum => 7,
       type => uint32, occurrence => optional, opts => []},
     #{name => group_limit, fnum => 7, rnum => 8,
       type => uint32, occurrence => optional, opts => []},
     #{name => group_sort, fnum => 8, rnum => 9,
       type => {msg, sort}, occurrence => optional,
       opts => []}];
find_msg_def(group_search_response) ->
    [#{name => matches, fnum => 1, rnum => 2,
       type => uint64, occurrence => optional, opts => []},
     #{name => group_matches, fnum => 2, rnum => 3,
       type => uint64, occurrence => optional, opts => []},
     #{name => groups, fnum => 3, rnum => 4,
       type => {msg, group}, occurrence => repeated,
       opts => []}];
find_msg_def(group) ->
    [#{name => by, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => matches, fnum => 2, rnum => 3, type => uint64,
       occurrence => optional, opts => []},
     #{name => hits, fnum => 3, rnum => 4,
       type => {msg, group_hit}, occurrence => repeated,
       opts => []}];
find_msg_def(group_hit) ->
    [#{name => id, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => order, fnum => 2, rnum => 3,
       type => {msg, field_value}, occurrence => repeated,
       opts => []},
     #{name => fields, fnum => 3, rnum => 4,
       type => {msg, hit_field}, occurrence => repeated,
       opts => []}];
find_msg_def(hit) ->
    [#{name => id, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => order, fnum => 2, rnum => 3,
       type => {msg, field_value}, occurrence => repeated,
       opts => []},
     #{name => fields, fnum => 3, rnum => 4,
       type => {msg, hit_field}, occurrence => repeated,
       opts => []}];
find_msg_def(document) ->
    [#{name => index, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => fields, fnum => 2, rnum => 3,
       type => {msg, document_field}, occurrence => repeated,
       opts => []}];
find_msg_def(document_field) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => value, fnum => 2, rnum => 3,
       type => {msg, field_value}, occurrence => optional,
       opts => []},
     #{name => analyzed, fnum => 3, rnum => 4, type => bool,
       occurrence => optional, opts => []},
     #{name => stored, fnum => 4, rnum => 5, type => bool,
       occurrence => optional, opts => []},
     #{name => facet, fnum => 5, rnum => 6, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(hit_field) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => value, fnum => 2, rnum => 3,
       type => {msg, field_value}, occurrence => optional,
       opts => []}];
find_msg_def(field_value) ->
    [#{name => value_oneof, rnum => 2,
       fields =>
	   [#{name => string_value, fnum => 1, rnum => 2,
	      type => string, occurrence => optional, opts => []},
	    #{name => bool_value, fnum => 2, rnum => 2,
	      type => bool, occurrence => optional, opts => []},
	    #{name => double_value, fnum => 3, rnum => 2,
	      type => double, occurrence => optional, opts => []}]}];
find_msg_def(search_term) ->
    [#{name => field, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => value, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(document_update) ->
    [#{name => index, fnum => 1, rnum => 2,
       type => {msg, index}, occurrence => optional,
       opts => []},
     #{name => id, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => fields, fnum => 3, rnum => 4,
       type => {msg, document_field}, occurrence => repeated,
       opts => []}];
find_msg_def(update_seq) ->
    [#{name => seq, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(set_update_seq) ->
    [#{name => index, fnum => 1, rnum => 2,
       type => {msg, index}, occurrence => optional,
       opts => []},
     #{name => seq, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(service_response) ->
    [#{name => code, fnum => 1, rnum => 2, type => uint32,
       occurrence => optional, opts => []},
     #{name => reason, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['Search'].


get_service_def('Search') ->
    {{service, 'Search'},
     [#{name => 'Delete', input => index,
	output => service_response, input_stream => false,
	output_stream => false, opts => []},
      #{name => 'GetUpdateSequence', input => index,
	output => update_seq, input_stream => false,
	output_stream => false, opts => []},
      #{name => 'Info', input => index,
	output => info_response, input_stream => false,
	output_stream => false, opts => []},
      #{name => 'SetUpdateSequence', input => set_update_seq,
	output => service_response, input_stream => false,
	output_stream => false, opts => []},
      #{name => 'Search', input => search_request,
	output => search_response, input_stream => false,
	output_stream => false, opts => []},
      #{name => 'GroupSearch', input => group_search_request,
	output => group_search_response, input_stream => false,
	output_stream => false, opts => []},
      #{name => 'Update', input => document_update,
	output => service_response, input_stream => true,
	output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('Search') ->
    ['Delete', 'GetUpdateSequence', 'Info',
     'SetUpdateSequence', 'Search', 'GroupSearch', 'Update'];
get_rpc_names(_) -> error.


find_rpc_def('Search', RpcName) ->
    find_rpc_def_Search(RpcName);
find_rpc_def(_, _) -> error.


find_rpc_def_Search('Delete') ->
    #{name => 'Delete', input => index,
      output => service_response, input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Search('GetUpdateSequence') ->
    #{name => 'GetUpdateSequence', input => index,
      output => update_seq, input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Search('Info') ->
    #{name => 'Info', input => index,
      output => info_response, input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Search('SetUpdateSequence') ->
    #{name => 'SetUpdateSequence', input => set_update_seq,
      output => service_response, input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Search('Search') ->
    #{name => 'Search', input => search_request,
      output => search_response, input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Search('GroupSearch') ->
    #{name => 'GroupSearch', input => group_search_request,
      output => group_search_response, input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_Search('Update') ->
    #{name => 'Update', input => document_update,
      output => service_response, input_stream => true,
      output_stream => false, opts => []};
find_rpc_def_Search(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"Search">>) -> 'Search';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('Search') -> <<"Search">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"Search">>, <<"Delete">>) ->
    {'Search', 'Delete'};
fqbins_to_service_and_rpc_name(<<"Search">>, <<"GetUpdateSequence">>) ->
    {'Search', 'GetUpdateSequence'};
fqbins_to_service_and_rpc_name(<<"Search">>, <<"Info">>) ->
    {'Search', 'Info'};
fqbins_to_service_and_rpc_name(<<"Search">>, <<"SetUpdateSequence">>) ->
    {'Search', 'SetUpdateSequence'};
fqbins_to_service_and_rpc_name(<<"Search">>, <<"Search">>) ->
    {'Search', 'Search'};
fqbins_to_service_and_rpc_name(<<"Search">>, <<"GroupSearch">>) ->
    {'Search', 'GroupSearch'};
fqbins_to_service_and_rpc_name(<<"Search">>, <<"Update">>) ->
    {'Search', 'Update'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('Search', 'Delete') ->
    {<<"Search">>, <<"Delete">>};
service_and_rpc_name_to_fqbins('Search',
			       'GetUpdateSequence') ->
    {<<"Search">>, <<"GetUpdateSequence">>};
service_and_rpc_name_to_fqbins('Search', 'Info') ->
    {<<"Search">>, <<"Info">>};
service_and_rpc_name_to_fqbins('Search',
			       'SetUpdateSequence') ->
    {<<"Search">>, <<"SetUpdateSequence">>};
service_and_rpc_name_to_fqbins('Search', 'Search') ->
    {<<"Search">>, <<"Search">>};
service_and_rpc_name_to_fqbins('Search',
			       'GroupSearch') ->
    {<<"Search">>, <<"GroupSearch">>};
service_and_rpc_name_to_fqbins('Search', 'Update') ->
    {<<"Search">>, <<"Update">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"Index">>) -> index;
fqbin_to_msg_name(<<"InfoResponse">>) -> info_response;
fqbin_to_msg_name(<<"Sort">>) -> sort;
fqbin_to_msg_name(<<"SearchRequest">>) -> search_request;
fqbin_to_msg_name(<<"SearchResponse">>) -> search_response;
fqbin_to_msg_name(<<"GroupSearchRequest">>) -> group_search_request;
fqbin_to_msg_name(<<"GroupSearchResponse">>) -> group_search_response;
fqbin_to_msg_name(<<"Group">>) -> group;
fqbin_to_msg_name(<<"GroupHit">>) -> group_hit;
fqbin_to_msg_name(<<"Hit">>) -> hit;
fqbin_to_msg_name(<<"Document">>) -> document;
fqbin_to_msg_name(<<"DocumentField">>) -> document_field;
fqbin_to_msg_name(<<"HitField">>) -> hit_field;
fqbin_to_msg_name(<<"FieldValue">>) -> field_value;
fqbin_to_msg_name(<<"SearchTerm">>) -> search_term;
fqbin_to_msg_name(<<"DocumentUpdate">>) -> document_update;
fqbin_to_msg_name(<<"UpdateSeq">>) -> update_seq;
fqbin_to_msg_name(<<"SetUpdateSeq">>) -> set_update_seq;
fqbin_to_msg_name(<<"ServiceResponse">>) -> service_response;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(index) -> <<"Index">>;
msg_name_to_fqbin(info_response) -> <<"InfoResponse">>;
msg_name_to_fqbin(sort) -> <<"Sort">>;
msg_name_to_fqbin(search_request) -> <<"SearchRequest">>;
msg_name_to_fqbin(search_response) -> <<"SearchResponse">>;
msg_name_to_fqbin(group_search_request) -> <<"GroupSearchRequest">>;
msg_name_to_fqbin(group_search_response) -> <<"GroupSearchResponse">>;
msg_name_to_fqbin(group) -> <<"Group">>;
msg_name_to_fqbin(group_hit) -> <<"GroupHit">>;
msg_name_to_fqbin(hit) -> <<"Hit">>;
msg_name_to_fqbin(document) -> <<"Document">>;
msg_name_to_fqbin(document_field) -> <<"DocumentField">>;
msg_name_to_fqbin(hit_field) -> <<"HitField">>;
msg_name_to_fqbin(field_value) -> <<"FieldValue">>;
msg_name_to_fqbin(search_term) -> <<"SearchTerm">>;
msg_name_to_fqbin(document_update) -> <<"DocumentUpdate">>;
msg_name_to_fqbin(update_seq) -> <<"UpdateSeq">>;
msg_name_to_fqbin(set_update_seq) -> <<"SetUpdateSeq">>;
msg_name_to_fqbin(service_response) -> <<"ServiceResponse">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "search3.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["search3.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["search3"].


get_msg_containment("search3") ->
    [document, document_field, document_update, field_value,
     group, group_hit, group_search_request,
     group_search_response, hit, hit_field, index,
     info_response, search_request, search_response,
     search_term, service_response, set_update_seq, sort,
     update_seq];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("search3") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("search3") -> ['Search'];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("search3") ->
    [{'Search', 'Delete'}, {'Search', 'GetUpdateSequence'},
     {'Search', 'Info'}, {'Search', 'SetUpdateSequence'},
     {'Search', 'Search'}, {'Search', 'GroupSearch'},
     {'Search', 'Update'}];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("search3") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"Group">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"UpdateSeq">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"SetUpdateSeq">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"Sort">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"SearchRequest">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"HitField">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"Hit">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"GroupSearchRequest">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"GroupHit">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"DocumentField">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"Document">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"ServiceResponse">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"SearchResponse">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"InfoResponse">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"GroupSearchResponse">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"FieldValue">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"DocumentUpdate">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"Index">>) -> "search3";
get_proto_by_msg_name_as_fqbin(<<"SearchTerm">>) -> "search3";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"Search">>) ->
    "search3";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.7.3".

gpb_version_as_list() ->
    [4,7,3].
